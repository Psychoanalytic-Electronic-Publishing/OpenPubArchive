# -*- coding: UTF-8 -*-
"""
This is the original module used to provide journal data for the PEPXML processing engine used to build from KBD3 and import files.

This module adapted from a much older module used in PEPXML to compile PEP instances since 200x!

  ** Slowly being adopted to opas **
  
  Should probably be integrated into opasProductLib - some routines are perhaps done better there from the database rather than code (newer module), and from the database

"""
#
# 20071005 - Added BAFC
#
#
# To add a new journal:
#    1) Add dictionary of issues jrnl = {year:vol, year2:[vol2, vol3]}
#      if gPEPBuild == "A1v15":  # working "new journal
#
#    2) Add to all = {"AIM":aim,} to map the dictionary to the jrnlcode string for the build version if g
#
#    3) Add the journal abbreviation to the jrnlAbbr dictionary
#         jrnlAbbr = {
#            "AIM"       : "Am. Imago",
#         }
#    4) Add the full journal name
#       # Journal names used for TOJ indexes
#
#       jrnlFull = {
#            "AIM"       : "American Imago",
#
#     5) Add a regex to recognize the journal in references to  jrnlPEPPatterns
#
#       jrnlPEPPatterns = {
#            "AIM"          :       "\&AIM\;|" + patOptThe + patAmerican + patReqdSpace + patImago,
#
#     6) Include the new pattern in the list of patterns to be searched:
#
#        if gPEPBuild == "A1v15":
#           rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("DR" ), re.VERBOSE | re.IGNORECASE), "DR"   ))
#           rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("CJP" ), re.VERBOSE | re.IGNORECASE), "CJP"   ))
#
#     7) Add the journal to the ISSN table in the database
#
#     (While it might be good to put this information in the database instead, so no new build was needed to add a journal,
#      that would mean we'd need a database update sent to Aptara each time we added a journal.)

"""
Class Module to encapsulate journal metadata information used to validate PEP journal data.
"""
import sys
sys.path.append('../libs')
sys.path.append('../config')
sys.path.append('../libs/configLib')

import logging
logger = logging.getLogger(__name__)

import re
# import codecs
import opasGenSupportLib as opasgenlib
import opasDocuments

global gJrnlData

gDbg1 = 0  # details
gDbg2 = 1  # High level


#============================================================================================
class PEPJournalData:
    """
    Journal check and identification info.

    >>>
    """

    # American Imago   - 2001 was skipped, so the reference there is just to catch bad refs; same for 1943, 1944, 1945
    # 2010-1-31 Corrected 2002 - 2009 dates.
    aim = {
        1939:1, 1940:1, 1941:2, 1942:3, 1943:[3,4], 1944:[3,4], 1946:[3,4], 1946:[3,4], 1947:4, 1948:5, 1949:6,
        1950:7, 1951:8, 1952:9, 1953:10, 1954:11, 1955:12, 1956:13, 1957:14, 1958:15, 1959:16,
        1960:17, 1961:18, 1962:19, 1963:20, 1964:21, 1965:22, 1966:23, 1967:24, 1968:25, 1969:26,
        1970:27, 1971:28, 1972:29, 1973:30, 1974:31, 1975:32, 1976:33, 1977:34, 1978:35, 1979:36,
        1980:37, 1981:38, 1982:39, 1983:40, 1984:41, 1985:42, 1986:43, 1987:44, 1988:45, 1989:46,
        1990:47, 1991:48, 1992:49, 1993:50, 1994:51, 1995:52, 1996:53, 1997:54, 1998:55, 1999:56,
        2000:57, 2001:[57,58], 2002:59, 2003:60, 2004:61, 2005:62, 2006:63, 2007:64, 2008:65, 2009:66,
        2010:67, 2011:68, 2012:69, 2013:70, 2014:71, 2015:72, 2016:73, 2017:74, 2018:75, 2019:76,
        2020:77, 2021:78, 2022:79, 2023:80, 2024:81, 2025:82, 2026:83, 2027:84, 2028:85, 2029:86,
    }

    aps = {
        1999:1,
        2000:2, 2001:3, 2002:4, 2003:5, 2004:6
    }

    ajrpp = {
        2007:1, 2008:2, 2009:3,
        2010:4, 2011:5, 2012:6, 2013:7, 2014:8, 2015:9, 2016:10, 2017:11, 2018:12, 2019:13,
        2020:14, 2021:15, 2022:16, 2023:17, 2024:18, 2025:19, 2026:20, 2027:21, 2028:22, 2029:23,
        2030:24
    }

    # american journal of psychiatry (used to separate out the miscoded entities; not a PEP journal)
    ajpsi = {
        1844:1, 1845:[1,2], 1856:[2,3], 1857:[3,4], 1858:[4,5], 1859:[5,6],
        1850:[6,7],     1851:[7,8],     1852:[8,9],     1853:[9,10],    1854:[10,11],   1855:[11,12],   1856:[12,13],   1857:[13,14],   1858:[14,15],   1859:[15,16],
        1860:[16,17],   1861:[17,18],   1862:[18,19],   1863:[19,20],   1864:[20,21],   1865:[21,22],   1866:[22,23],   1867:[23,24],   1868:[24,25],   1869:[25,26],
        1870:[26,27],   1871:[27,28],   1872:[28,29],   1873:[29,30],   1874:[30,31],   1875:[31,32],   1876:[32,33],   1877:[33,34],   1878:[34,35],   1879:[35,36],
        1880:[36,37],   1881:[37,38],   1882:[38,39],   1883:[39,40],   1884:[40,41],   1885:[41,42],   1886:[42,43],   1887:[43,44],   1888:[44,45],   1889:[45,46],
        1890:[46,47],   1891:[47,48],   1892:[48,49],   1893:[49,50],   1894:[50,51],   1895:[51,52],   1896:[52,53],   1897:[53,54],   1898:[54,55],   1899:[55,56],
        1900:[56,57],   1901:[57,58],   1902:[58,59],   1903:[59,60],   1904:[60,61],   1905:[61,62],   1906:[62,63],   1907:[63,64],   1908:[64,65],   1909:[65,66],
        1910:[66,67],   1911:[67,68],   1912:[68,69],   1913:[69,70],   1914:[70,71],   1915:[71,72],   1916:[72,73],   1917:[73,74],   1918:[74,75],   1919:[75,76],
        1920:[76,77],   1921:[77,78],   1922:[78,79],   1923:[79,80],   1924:[80,81],   1925:[81,82],   1926:[82,83],   1927:[83,84],   1928:[84,85],   1929:[85,86],
        1930:[86,87],   1931:[87,88],   1932:[88,89],   1933:[89,90],   1934:[90,91],   1935:[91,92],   1936:[92,93],   1937:[93,94],   1938:[94,95],   1939:[95,96],
        1940:[96,97],   1941:[97,98],   1942:[98,99],   1943:[99,100],  1944:[100,101], 1945:[101,102], 1946:[102,103], 1947:[103,104], 1948:[104,105], 1949:[105,106],
        1950:[106,107], 1951:[107,108], 1952:[108,109], 1953:[109,110], 1954:[110,111], 1955:[111,112], 1956:[112,113], 1957:[113,114], 1958:[114,115], 1959:[115,116],
        1960:[116,117], 1961:[117,118], 1962:[118,119], 1963:[119,120], 1964:[120,121], 1965:[121,122], 1966:[122,123], 1967:[123,124], 1968:[124,125], 1969:[125,126],
        1970:[126,127], 1971:[127,128], 1972:[128,129], 1973:[129,130], 1974:[130,131], 1975:[131,132], 1976:[132,133], 1977:[133,134], 1978:[134,135], 1979:[135,136],
        1980:137, 1981:138, 1982:139, 1983:140, 1984:141, 1985:142, 1986:143, 1987:144, 1988:145, 1989:146,
        1990:147, 1991:148, 1992:149, 1993:150, 1994:151, 1995:152, 1996:153, 1997:154, 1998:155, 1999:156,
        2000:157, 1991:158, 1992:159, 1993:160, 1994:161, 1995:162, 1996:163, 1997:164, 1998:165, 1999:166,
        2010:167, 2011:168, 2012:169, 2013:170, 2014:171, 2015:172, 2016:173, 2017:174, 2018:175, 2019:176,
        2020:177, 2021:178, 2022:179, 2023:180, 2024:181, 2025:182, 2026:183, 2027:184, 2028:185, 2029:186,
    }

    # american journal of psychology (used to separate out the miscoded entities;
    # NOT A PEP journal)
    ajpsy = {
        1887:1, 1888:[1,2], 1889:[2,3],
        1890:3, 1891:[3,4], 1892:[4,5], 1893:[5,6], 1894:6, 1895:[6,7], 1896:[7,8], 1897:[8,9], 1898:[9,10], 1899:[10,11],
        1900:[11,12], 1901:12, 1902:13, 1903:14, 1904:15, 1905:16, 1906:17, 1907:18, 1908:19, 1909:20,
        1910:21, 1911:22, 1912:23, 1913:24, 1914:25, 1915:26, 1916:27, 1917:28, 1918:29, 1919:30,
        1920:31, 1921:32, 1922:33, 1923:34, 1924:35, 1925:36, 1926:37, 1927:[38,39], 1928:40, 1929:41,
        1930:42, 1931:43, 1932:44, 1933:45, 1934:46, 1935:47, 1936:48, 1937:[49,50], 1938:51, 1939:52,
        1940:53, 1941:54, 1942:55, 1943:56, 1944:57, 1945:58, 1946:59, 1947:60, 1948:61, 1949:62,
        1950:63, 1951:64, 1952:65, 1953:66, 1954:67, 1955:68, 1956:69, 1957:70, 1958:71, 1959:72,
        1960:73, 1961:74, 1962:75, 1963:76, 1964:77, 1965:78, 1966:79, 1967:80, 1968:81, 1969:82,
        1970:83, 1971:84, 1972:85, 1973:86, 1974:87, 1975:88, 1976:89, 1977:90, 1978:91, 1979:92,
        1980:93, 1981:94, 1982:95, 1983:96, 1984:97, 1985:98, 1986:99, 1987:100, 1988:101, 1989:102,
        1990:103, 1991:104, 1992:105, 1993:106, 1994:107, 1995:108, 1996:109, 1997:110, 1998:111, 1999:112,
        2000:113, 2001:114, 2002:115, 2003:116, 2004:117, 2005:118, 2006:119, 2007:120, 2008:121, 2009:122,
        2010:123, 2011:124, 2012:125, 2013:126, 2014:127, 2015:128, 2016:129, 2017:130, 2018:131, 2019:132,
        2020:133, 2021:134, 2022:135, 2023:136, 2024:137, 2025:138, 2026:139, 2027:140, 2028:141, 2029:142,
        2030:143
    }

    # american journal of psychoanalysis
    ajp = {
        1941:1, 1942:2, 1943:3, 1944:4, 1945:5, 1946:6, 1947:7, 1948:8, 1949:9,
        1950:10, 1951:11, 1952:12, 1953:13, 1954:14, 1955:15, 1956:16, 1957:17, 1958:18, 1959:19,
        1960:20, 1961:21, 1962:22, 1963:23, 1964:24, 1965:25, 1966:26, 1967:27, 1968:28, 1969:29,
        1970:30, 1971:31, 1972:32, 1973:33, 1974:34, 1975:35, 1976:36, 1977:37, 1978:38, 1979:39,
        1980:40, 1981:41, 1982:42, 1983:43, 1984:44, 1985:45, 1986:46, 1987:47, 1988:48, 1989:49,
        1990:50, 1991:51, 1992:52, 1993:53, 1994:54, 1995:55, 1996:56, 1997:57, 1998:58, 1999:59,
        2000:60, 2001:61, 2002:62, 2003:63, 2004:64, 2005:65, 2006:66, 2007:67, 2008:68, 2009:69,
        2010:70, 2011:71, 2012:72, 2013:73, 2014:74, 2015:75, 2016:76, 2017:77, 2018:78, 2019:79,
        2020:80, 2021:81, 2022:82, 2023:83, 2024:84, 2025:85, 2026:86, 2027:87, 2028:88, 2029:89,
        2030:90
    }

    # revista de psicoanalysis (ES)
    apm = {
        1985:[1, 2], 1986:[3, 4], 1987:[5, 6], 1988:[7, 8], 1989:["8S"],
        1990:[11, 12], 1991:[13, 14], 1992:[15, 16], 1993:[17, 18], 1994:[19, 20], 1995:[21, 22], 1996:[23, 24], 1997:[25, 26], 1998:[27, 28], 1999:[29, 30, 31],
        2000:[32, 33], 2001:[34, 35, 36], 2002:[37, 38], 2003:[39, 40], 2004:[41, 42, 43],
        2005:[44, 45, 46], 2006:[47, 48, 49], 2007:[50, 51, 52], 2008:[53, 54, 55], 2009:[56, 57, 58],
        2010:[59, 60, 61], 2011:[62, 63, 64], 2012:[65, 66, 67], 2013:[68, 69, 70], 2014:[71, 72, 73], 2015:[74, 75], 2016:[76, 77, 78], 2017:[79, 80, 81], 2018:[82, 83, 84], 2019:[85, 86, 87],
        2020:[88, 89, 90], 2021:[91, 92, 93], 2022:[94, 95, 96], 2023:[97, 98, 99], 2024:[100, 101, 102], 2025:[103, 104, 105], 2026:[106, 107, 108], 2027:[109, 110, 111], 2028:[112, 113, 114], 2029:[115, 116, 117],
    }

    bjp = {
        1984:1, 1985:[1,2], 1986:[2,3], 1987:[3,4], 1988:[4,5], 1989:[5,6],
        1990:[6, 7],  1991:[7, 8],  1992:[8, 9],  1993:[9, 10],  1994:[10, 11], 1995:[11, 12], 1996:[12, 13], 1997:[13, 14], 1998:[14, 15], 1999:[15, 16],
        2000:[16, 17], 2001:[17, 18], 2002:[18, 19], 2003:[19, 20], 2004:[20, 21], 2005:[21, 22], 2006:[22, 23], 2007:[23, 24], 2008:[24, 25], 2009:[25, 26],
        2010:[26, 27], 2011:[27, 28], 2012:[28, 29], 2013:[29, 30], 2014:[30, 31], 2015:[31, 32], 2016:[32, 33], 2017:[33, 34], 2018:[34, 35], 2019:[35, 36],
        2020:[36, 37], 2021:[37, 38], 2022:[38, 39], 2023:[39, 40], 2024:[40, 41], 2025:[41, 42], 2026:[42, 43], 2027:[43, 44], 2028:[44, 45], 2029:[45, 46],
    }

    ##################################################################################################################################
    # New journals for 2015, need to be moved later.  ALSO: Need to put code in biblio pattrern processing so they are linked.
    ##################################################################################################################################

    adpsa = {  # 2015 Almanach der Psychoanalyse
               1926:1,
        1927:2,
        1928:3,
        1929:4,
        1930:5,
        1931:6,
        1932:7,
        1933:8,
        1934:9,
        1935:10,
        1936:11,
        1937:12,
        1938:13     # ENDED
        }

    izpa = {  # 2015 Internationale Zeitschrift für Psychoanalyse
              1913:1,
               1914:2,
               1915:3,
               1916:4,
               1917:4,
               1918:4,
               1919:5,
               1920:6,
               1921:7,
               1922:8,
               1923:9,
               1924:10,
               1925:11,
               1926:12,
               1927:13,
               1928:14,
               1929:15,
               1930:16,
               1931:17,
               1932:18,
               1933:19,
               1934:20,
               1935:21,
               1936:22,
               1937:23,
               1939:24,
               1940:25,
               1941:26         # ENDED
               }

    jppf = {  # 2015 Jahrbuch für psychoanalytische und psychopathologische Forschung
              1909:1,
              1910:2,
              1911:3,
              1912:4,
              1913:5,
              1914:6           #ENDED
              }


    psabew = {  # 2015 Jahrbuch für psychoanalytische und psychopathologische Forschung
                1929:1,
              1930:2,
              1931:3,
              1932:4,
              1933:5           #ENDED
              }

    zpsap = {  #Zeitschrift für psychoanalytische Pädagogik
               1926:1,
               1927:[1,2],
               1928:[2,3],
               1929:3,
               1930:4,
               1931:5,
               1932:6,
               1933:7,
               1934:8,
               1935:9,
               1936:10,
               1937:11           #ENDED
            }

    zbpa = {  # 2015 Zentralblatt für Psychoanalyse
              1911:1,
              1912:2,
              1913:3,
              1914:4           #ENDED
            }


    anrp = {
        2007:1,
        2008:2,
        2009:3,
        2010:4, 2011:5, 2012:6, 2013:7, 2014:8, 2015:9, 2016:10, 2017:11, 2018:12, 2019:13,
        2020:14, 2021:15, 2022:16, 2023:17, 2024:18, 2025:19, 2026:20, 2027:21, 2028:22, 2029:23,
        2030:24,
    }

    anijpfr = {
        2003:2003, 2004:2004, 2005:2005, 2006:2006, 2007:2007, 2008:2008, 2009:2009,
        2010:2010, 2011:2011, 2012:2012, 2013:2013, 2014:2014, 2015:2015, 2016:2016, 2017:2017, 2018:2018, 2019:2019,
        2020:2020, 2021:2021, 2022:2022, 2023:2023, 2024:2024, 2025:2025, 2026:2026, 2027:2027, 2028:2028, 2029:2029,
        2030:2030,
    }

    anijpit = {
        2005:1, 2006:2, 2007:3, 2008:4, 2009:5,
        2012:6, 2013:None, 2014:7, 2015:None, 2016:8, 2017:9, 2018:10, 2019:12,
        2020:13, 2021:14, 2022:15, 2013:16, 2014:17, 2015:18, 2016:19, 2017:20, 2018:21, 2019:22,
    }

    anijpde = {
        2006:1, 2007:2, 2008:3, 2009:4, 2010:5,
        2011:6, 2012:7, 2013:8, 2014:9, 2015:10, 2016:11, 2017:12, 2018:13, 2019:14,
        2020:15, 2021:16, 2022:17, 2013:18, 2014:19, 2015:20, 2016:21, 2017:22, 2018:23, 2019:24,
    }

    anijpel = {
        2013:1, 2014:2, 2015:3, 2016:4, 2017:5, 2018:6, 2019:7,
        2020:8, 2021:9, 2022:10, 2023:11, 2024:12, 2025:13, 2026:14, 2027:15, 2028:16, 2029:17,
    }

    anijptr = {
        2009:1,
        2010:2, 2011:3, 2012:4, 2013:5, 2014:6, 2015:7, 2016:8, 2017:9, 2018:10, 2019:11,
        2020:12, 2021:13, 2022:14, 2023:15, 2024:16, 2025:17, 2026:18, 2027:19, 2028:20, 2029:21,
    }

    # Annual Psychoanal.
    aop  = {
        1973:1, 1974:2, 1975:3, 1976:4, 1977:5, 1978:6, 1979:7,
        1980:8, 1981:9, 1982:10, 1983:11, 1984:12, 1985:13, 1986:14, 1987:15, 1988:16, 1989:17,
        1990:18, 1991:19, 1992:20, 1993:21, 1994:22, 1995:23, 1996:24, 1997:25, 1998:26, 1999:27,
        2000:28, 2001:29, 2002:30, 2003:31, 2004:32, 2005:33, 2006:34, 2007:35, 2008:36, 2009:37,
        2010:38, 2011:39, 2012:40, 2013:41, 2014:42, 2015:43, 2016:44, 2017:45, 2018:46, 2019:47,
        2020:48, 2021:49, 2022:50, 2023:51, 2024:52, 2025:53, 2026:54, 2027:55, 2028:56, 2029:57,
        2030:58
    }

    apa = {
        1953:1, 1954:2, 1955:3, 1956:4, 1957:5, 1958:6, 1959:7,
        1960:8, 1961:9, 1962:10, 1963:11, 1964:12, 1965:13, 1966:14, 1967:15, 1968:16, 1969:17,
        1970:18, 1971:19, 1972:20, 1973:21, 1974:22, 1975:23, 1976:24, 1977:25, 1978:26, 1979:27,
        1980:28, 1981:29, 1982:30, 1983:31, 1984:32, 1985:33, 1986:34, 1987:35, 1988:36, 1989:37,
        1990:38, 1991:39, 1992:40, 1993:41, 1994:42, 1995:43, 1996:44, 1997:45, 1998:46, 1999:47,
        2000:48, 2001:49, 2002:50, 2003:51, 2004:52, 2005:53, 2006:54, 2007:55, 2008:56, 2009:57,
        2010:58, 2011:59, 2012:60, 2013:61, 2014:62, 2015:63, 2016:64, 2017:65, 2018:66, 2019:67,
        2020:68, 2021:69, 2022:70, 2023:71, 2024:72, 2025:73, 2026:74, 2027:75, 2028:76, 2029:77,
        2030:78
    }

    bafc  = {
        1978:1, 1979:2, 1980:3, 1981:4, 1982:5, 1982:6, 1984:7, 1985:8, 1986:9, 1987:10, 1988:11, 1989:12,
        1990:13, 1991:14, 1992:15, 1993:16, 1994:17, 1995:18, 1996:19, 1997:20, 1998:21, 1999:22,
        2000:23, 2001:24, 2002:25, 2003:26, 2004:27, 2005:28, 2006:29, 2007:30, 2008:31
        # ended
    }

    # removed extra? entry 1944: 7 from BAP
    bap = {
        1938:1, 1939:2, 1940:3, 1948:4, 1949:5, 1950:6, 1951:7, 1952:8, 1953:9, 1954:10,
        1955:11, 1956:12, 1957:13, 1958:14, 1959:15, 1960:16, 1961:17, 1962:18, 1963:19, 1964:20,
        1965:21, 1966:22, 1967:23, 1968:24, 1969:25, 1970:26, 1971:27, 1972:28, 1973:29, 1974:30,
        1975:31, 1976:32, 1977:33, 1978:34, 1979:35, 1980:36, 1981:37, 1982:38, 1983:39, 1984:40,
        1985:41, 1986:42, 1987:43, 1988:44, 1989:45, 1990:46, 1991:47, 1992:48, 1993:49, 1994:50
        # ended
    }

    bip = {
        1923:4, 1924:5, 1925:6, 1926:7, 1927:8, 1928:9, 1929:10,
        1930:11, 1931:12, 1932:13, 1933:14, 1934:15, 1935:16, 1936:17, 1937:18, 1938:19, 1939:20,
        1940:21, 1941:22, 1942:23, 1943:24, 1944:25, 1945:26, 1946:27, 1947:28, 1948:29, 1949:30,
        1950:31, 1951:32, 1952:33, 1953:34, 1954:35, 1955:36, 1956:37, 1957:38, 1958:39, 1959:40,
        1960:41, 1961:42, 1962:43, 1963:44, 1964:45, 1965:46, 1966:47, 1967:48, 1968:49, 1969:50,
        1970:51, 1971:52, 1972:53, 1973:54, 1974:55, 1975:56, 1976:57, 1977:58, 1978:59, 1979:60,
        1980:61, 1981:62, 1982:63, 1983:64, 1984:65, 1985:66, 1986:67, 1987:68, 1988:69, 1989:70,
        1990:71, 1991:72, 1992:73, 1993:74, 1994:75, 1995:76, 1996:77, 2000:81
        # ended
    }

    # child and family psychoanalysis
    cfp = {
        2011:1, 2012:2, 2013:3, 2014:4, 2015:5, 2016:6, 2017:7, 2018:8, 2019:9,
        2020:10, 2021:11, 2022:12, 2023:13, 2024:14, 2025:15, 2026:16, 2027:17, 2028:18, 2029:19,
    }

    cjp = {
        1993:1,  1994:2,  1995:3,  1996:4,  1997:5,  1998:6,  1999:7,
        2000:8,  2001:9,  2002:10, 2003:11, 2004:12, 2005:13, 2006:14, 2007:15, 2008:16, 2009:17,
        2010:18, 2011:19, 2012:20, 2013:21, 2014:22, 2015:23, 2016:24, 2017:25, 2018:26, 2019:27,
        2020:28, 2021:29, 2022:30, 2023:31, 2024:32, 2025:33, 2026:34, 2027:35, 2028:36, 2029:37,
        2030:38
    }

    cps = {
        1964:1, 1965:[1,2], 1966:[2,3], 1967:[3,4], 1968:[4,5], 1969:[5,6],
        1970:[6,7], 1971:[7,8], 1972:[8,9], 1973:9, 1974:10, 1975:11, 1976:12, 1977:13, 1978:14, 1979:15,
        1980:16, 1981:17, 1982:18, 1983:19, 1984:20, 1985:21, 1986:22, 1987:23, 1988:24, 1989:25,
        1990:26, 1991:27, 1992:28, 1993:29, 1994:30, 1995:31, 1996:32, 1997:33, 1998:34, 1999:35,
        2000:36, 2001:37, 2002:38, 2003:39, 2004:40, 2005:41, 2006:42, 2007:43, 2008:44, 2009:45,
        2010:46, 2011:47, 2012:48, 2013:49, 2014:50, 2015:51, 2016:52, 2007:53, 2008:54, 2009:55,
        2020:56, 2021:57, 2022:58, 2023:59, 2024:60, 2025:61, 2026:62, 2007:63, 2008:64, 2009:65,
    }

    # DR
    dr = {
        2011:[1, 2, 3], 2012:[4, 5, 6], 2013:[7, 8], 2014:[9, 10, 11], 2015:[12, 13], 2016:[14, 15], 2017:17, 2018:18, 2019:19,
        2020:20, 2021:21, 2022:22, 2023:23, 2024:24, 2025:25, 2026:26, 2027:27, 2028:28, 2029:29,
    }

    # FA (this is not slated to go in until A1v7 though)
    fa = {
        1984:1, 1985:1, 1986:1,  1987:1, 1988:1, 1989:1,
        1990:1, 1991:2, 1992:3,  1993:4, 1995:5, 1996:6, 1996:7,
        2000:8, 2001:9,
        2003:10, 2004:11,
        2011:12, 2012:13, 2013:14, 2014:15, 2015:16, 2016:17, 2017:18, 2018:19, 2019:20,
        2020:21, 2021:22, 2022:23, 2023:24, 2024:25, 2025:26, 2026:27, 2027:28, 2028:29, 2029:30,
        2030:31
    }

    # FD Fort Da (this is not slated to go in until A1v10); there don't appear to be vols 1-5.
    fd = {
        2000:6, 2001:7, 2002:8, 2003:9, 2004:10, 2005:11, 2006:12, 2007:13, 2008:14, 2009:15,
        2010:16, 2011:17, 2012:18, 2013:19, 2014:20, 2015:21, 2016:22, 2017:23, 2018:24, 2019:25,
        2020:26, 2021:27, 2022:28, 2023:29, 2024:30, 2025:31, 2026:32, 2027:33, 2028:34, 2029:35,
        2030:36
    }

    # Gender and Psychoanal.
    gap = {
        1996:1, 1997:2, 1998:3, 1999:4,
        2000:5, 2001:6
        # ended
    }

    # IPL (books).
    ipl = {                        # is this really used?      No NLP equiv.
                                   1986:118,
                                   1969:79,
                                   1973:95,
                                   1980:109,
                                   1952:45,
                                   1921:2,
                                   1932:22,
                                   1961:55,
                                   1975:104,
                                   1963:59,
                                   1988:73,
                                   1965:64,
                                   1971:87,
                                   1975:100,
                                   1980:107,
                                   1986:115
                                   }



    # Int. Forum of Psychoanal.
    ifp = {
        1992:1, 1993:2, 1994:3, 1995:4, 1996:5, 1997:6, 1998:7, 1999:8,
        2000:9, 2001:10, 2002:11, 2003:12, 2004:13, 2005:14, 2006:15, 2007:16, 2008:17, 2009:18,
        2010:19, 2011:20, 2012:21, 2013:22, 2014:23, 2015:24, 2016:25, 2017:26, 2018:27, 2019:28,
        2020:29, 2021:30, 2022:31, 2023:32, 2024:33, 2025:34, 2026:35, 2027:36, 2028:37, 2029:38,
        2030:39
    }

    # Int. Forum of Psychoanal.
    ijaps = {
        2004:1, 2005:2, 2006:3, 2007:4, 2008:5, 2009:6,
        2010:7, 2011:8, 2012:9, 2013:10, 2014:11, 2015:12, 2016:13, 2017:14, 2018:15, 2019:16,
        2020:17, 2021:18, 2022:19, 2023:20, 2024:21, 2025:22, 2026:23, 2027:24, 2028:25, 2029:26,
        2030:27
    }

    # Int. Journal of Psychoanal.
    ijp = {
        1920:1,  1921:2,  1922:3,  1923:4,  1924:5,  1925:6,  1926:7,  1927:8,  1928:9,  1929:10,
        1930:11, 1931:12, 1932:13, 1933:14, 1934:15, 1935:16, 1936:17, 1937:18, 1938:19, 1939:20,
        1940:21, 1941:22, 1942:23, 1943:24, 1944:25, 1945:26, 1946:27, 1947:28, 1948:29, 1949:30,
        1950:31, 1951:32, 1952:33, 1953:34, 1954:35, 1955:36, 1956:37, 1957:38, 1958:39, 1959:40,
        1960:41, 1961:42, 1962:43, 1963:44, 1964:45, 1965:46, 1966:47, 1967:48, 1968:49, 1969:50,
        1970:51, 1971:52, 1972:53, 1973:54, 1974:55, 1975:56, 1976:57, 1977:58, 1978:59, 1979:60,
        1980:61, 1981:62, 1982:63, 1983:64, 1984:65, 1985:66, 1986:67, 1987:68, 1988:69, 1989:70,
        1990:71, 1991:72, 1992:73, 1993:74, 1994:75, 1995:76, 1996:77, 1997:78, 1998:79, 1999:80,
        2000:81, 2001:82, 2002:83, 2003:84, 2004:85, 2005:86, 2006:87, 2007:88, 2008:89, 2009:90,
        2010:91, 2011:92, 2012:93, 2013:94, 2014:95, 2015:96, 2016:97, 2017:98, 2018:99, 2019:100,
        2020:101, 2021:102, 2022:103, 2023:104, 2024:105, 2025:106, 2026:107, 2027:108, 2028:109, 2029:110,
        2030:111
    }

    # IJP Open
    ijpopen = {
        2014:1,  2015:2,  2016:3,  2017:4,  2018:5,
        2019:6,  2020:7,  2021:8,  2022:9,  2023:10, 2024:11,  2025:12,  2026:13,  2027:14,  2028:15, 2029:16,
    }

    # Int. Forum of Psychoanal.
    ijpes = {
        2015:1,  2016:2,  2017:3,  2018:4,  2019:5,
        2020:6,  2021:7,  2022:8,  2023:9,  2024:10, 2025:11,  2026:12,  2027:13,  2028:14,  2029:15,
    }

    # Int. Journal of Psychoanal. Self Psychology
    ijpsp = {
        2006:1, 2007:2, 2008:3, 2009:[4, '4S'],
        2010:5, 2011:6, 2012:7, 2013:8, 2014:9, 2015:10, 2016:11, 2017:12, 2018:13, 2019:14,
        2020:15, 2021:16, 2022:17, 2023:18, 2024:19, 2025:20, 2026:21, 2027:22, 2028:23, 2029:24,
        2030:25
    }

    # Psychoanal Self and Context (formerly IJPSP)
    ijpsppsc = {
        2017:12, 2018:13, 2019:14, 2020:15, 2021:16, 2022:17, 2023:18, 2024:19, 2025:20, 2026:21,
        2027:22, 2028:23, 2029:24, 2020:25, 2021:26, 2022:27, 2023:28, 2024:29, 2025:30, 2026:31,
    }

    imago = {
        1912:1, 1913:2, 1914:3, 1915:4, 1916:4, 1917:5, 1919:5,
        1920:6, 1921:7, 1922:8, 1923:9, 1924:10, 1925:11, 1926:12, 1927:13, 1928:14, 1929: 15,
        1930:16, 1931:17, 1932:18, 1933:19, 1934:20, 1935:21, 1936:22, 1937:23, 1938:24, 1939:25
    }

    # Int. Review of Psychoanal.
    irp = {
        1974:1,  1975:2,  1976:3, 1977:4,  1978:5,  1979:6,
        1980:7,  1981:8,  1982:9, 1983:10, 1984:11, 1985:12, 1986:13, 1987:14, 1988:15, 1989:16,
        1990:17, 1991:18, 1992:19
        # ended
    }

    # Journal of the American Academy of Psychoanalysis
    jaa =   {
        1973:1,  1974:2,  1975:3,  1976:4,  1977:5,  1978:6,  1979:7,
        1980:8,  1981:9,  1982:10, 1983:11, 1984:12, 1985:13, 1986:14, 1987:15, 1988:16, 1989:17,
        1990:18, 1991:19, 1992:20, 1993:21, 1994:22, 1995:23, 1996:24, 1997:25, 1998:26, 1999:27,
        2000:28, 2001:29, 2002:30, 2003:31, 2004:32, 2005:33, 2006:34, 2007:35, 2008:36, 2009:37,
        2010:38, 2011:39
        # ended and replaced by PDPSY
    }

    # Jahrbuch
    jbp = {
        1960:  1, 1962:  2, 1964: 3, 1967:4, 1968:5, 1969:6,
        1974:7, 1975:8, 1976:9, 1978:10, 1979:11,
        1981: [12, 13], 1982: 14, 1983: 15, 1984:16, 1985:17, 1986:[18, 19], 1987:[20, 21], 1988:[22, 23], 1989:[24, 25],
        1990: 26, 1991: [27, 28], 1992: 29, 1993: [30, 31], 1994: [32, 33], 1995: [34, 35], 1996: [36, 37], 1997: [38, 39], 1998: 40, 1999:41,
        2000: 42, 2001: 43, 2002: [44, 45], 2003: [46, 47], 2004:[48, 49], 2005: [50, 51], 2006:[52, 53], 2007:[54, 55], 2008:[56, 57], 2009:[58, 59],
        2010: [60, 61], 2011: [62, 63], 2012: [64, 65], 2013: [66, 67], 2014:[68, 69], 2015:[70, 71], 2016:[72, 73], 2017:[74, 75], 2018:[76, 77], 2019:[78, 79],
        2020: [80, 81], 2021: [82, 83], 2022: [84, 85], 2023: [86, 87], 2024:[88, 89], 2025:[90, 91], 2026:[92, 93], 2027:[94, 95], 2028:[96, 97], 2029:[98, 99]
    }

    jcptx = {
        1963:1,  1964:1,  1965:1,  1966:1,  1967:2,  1968:2,  1969:2,
        1970:2,  1971:3,  1972:3,  1973:3,  1974:3,  1975:4,  1976:4,  1977:4, 1978:4, 1979:5,
        1980:6,  1981:7,  1982:8,  1983:9,  1984:10, 1985:11, 1986:12, 1987:13, 1988:14, 1989:15,
        1990:16, 1991:17, 1992:18, 1993:19, 1994:20, 1995:21, 1996:22, 1997:23, 1998:24, 1999:25,
        2000:26, 2001:27, 2002:28, 2003:29, 2004:30, 2005:31, 2006:32, 2007:33, 2008:34, 2009:35,
        2010:36, 2011:37, 2012:38, 2013:39, 2014:40, 2015:41, 2016:42, 2017:43, 2018:44, 2019:45,
        2020:46, 2021:47, 2022:48, 2023:49, 2024:50, 2025:51, 2026:52, 2027:53, 2028:54, 2029:55,
    }

    # not contracted as of 2009.11, but will be soon
    jep = {
        1995:[1,2], 1996:[2,3],  1997:[4,5],  1998:[6,7],  1999:[8,9],
        2000:[10,11], 2001:[12,13], 2002:[14,15], 2003:[16,17], 2004:[18,19], 2005:[20,21], 2006:[22,23], 2007:[24,25]
        # not contracted yet
    }

    # JCP ended in 2003.
    jcp = {
        1992:1, 1993:2,  1994:3,  1995:4,  1996:5, 1997:6, 1998:7, 1999:8,
        2000:9, 2001:10, 2002:11, 2003:12
        #ended
    }

    jicap = {   # Obviuosly, the first four of these aren't right...Need to figure out what years these are XXX
                2000:1, 2002:2, 2004:3, 2005:4, 2006:5, 2007:6, 2008:7, 2009:8,
                2010:9, 2011:10, 2012:11, 2013:12, 2014:13, 2015:14, 2016:15, 2017:16, 2018:17, 2019:18,
                2020:19, 2021:20, 2022:21, 2023:22, 2024:23, 2025:24, 2026:25, 2027:26, 2028:27, 2029:28,
                }

    joap = {
        1956:  1, 1957:  2, 1958:  3, 1959:  4,
        1960:  5, 1961:  6, 1962:  7, 1963:  8, 1964: 9, 1965:10, 1966:11, 1967:12, 1968:13, 1969:14,
        1970: 15, 1971: 16, 1972: 17, 1973: 18, 1974:19, 1975:20, 1976:21, 1977:22, 1978:23, 1979:24,
        1980: 25, 1981: 26, 1982: 27, 1983: 28, 1984:29, 1985:30, 1986:31, 1987:32, 1988:33, 1989:34,
        1990: 35, 1991: 36, 1992: 37, 1993: 38, 1994:39, 1995:40, 1996:41, 1997:42, 1998:43, 1999:44,
        2000: 45, 2001: 46, 2002: 47, 2003: 48, 2004:49, 2005:50, 2006:51, 2007:52, 2008:53, 2009:54,
        2010: 55, 2011: 56, 2012: 57, 2013: 58, 2014:59, 2015:60, 2016:61, 2017:62, 2018:63, 2019:64,
        2020: 65, 2021: 66, 2022: 67, 2023: 68, 2024:69, 2025:70, 2026:71, 2027:72, 2028:73, 2029:74
    }

    luam = {
        1988: 1, 1989: 2,
        1990: 3, 1991: 4, 1992: 5, 1993: 6, 1994: 7, 1995: 8, 1996: 9, 1997:10, 1998:11, 1999:12,
        2000:13, 2001:14, 2002:15, 2003:16, 2004:17, 2005:18, 2006:19, 2007:20, 2008:21, 2009:22,
        2010:23, 2011:24, 2012:25, 2013:26, 2014:27, 2015:28, 2016:29, 2017:30, 2018:31, 2019:32,
        2020:33, 2021:34, 2022:35, 2023:36, 2024:37, 2025:38, 2026:39, 2027:40, 2028:41, 2029:42,
        2021:43,
    }

    mpsa = {
        1976:1,  1977:2,  1978:3,  1979:4,
        1980:5,  1981:6,  1982:7,  1983:8,  1984:9,  1985:10, 1986:11, 1987:12, 1988:13, 1989:14,
        1990:15, 1991:16, 1992:17, 1993:18, 1994:19, 1995:20, 1996:21, 1997:22, 1998:23, 1999:24,
        2000:25, 2001:26, 2002:27, 2003:28, 2004:29, 2005:30, 2006:31, 2007:32, 2008:33, 2009:34,
        2010:35, 2011:36, 2012:37, 2013:38, 2014:39, 2015:40, 2016:41, 2017:42, 2018:None, 2019:43,
        2020:44, 2021:45, 2022:46, 2023:47, 2024:48, 2025:49, 2026:50, 2027:51, 2028:52, 2029:53
    }

    np = {
        1999:1,
        2000:2,  2001:3,  2002:4,  2003:5,  2004:6,  2005:7,  2006:8,  2007:9,  2008:10, 2009:11,
        2010:12, 2011:13, 2012:14, 2013:15, 2014:16, 2015:17, 2016:18, 2017:19, 2018:20, 2019:21,
        2020:22, 2021:23, 2022:24, 2023:25, 2024:26, 2025:27, 2026:28, 2027:29, 2028:30, 2029:31
    }

    opus  = {
        2000:1,  2001:1,  2002:2,  2003:3,  2004:4,  2005:5,  2006:6,  2007:7,  2008:8,  2009:9,
            2010:10, 2011:11, 2012:12, 2013:13, 2014:14, 2015:15, 2016:16, 2017:17, 2018:18, 2019:19,
    }

    # ToDo - XXX Need to decide how to handle this!
    offsite = {
        2012:1, 2013:2, 2014:3, 2015:4, 2016:5, 2017:6, 2018:7, 2019:8,
    }

    # Psa and History
    pah = {
        1999:1,  2000:2,  2001:3,  2002:4, 2003:5, 2004:6, 2005:7, 2006:8, 2007:9, 2008:10, 2009:11,
        2010:12, 2011:13, 2012:14, 2013:15, 2014:16, 2015:17, 2016:18, 2017:19, 2018:20, 2019:21,
        2020:22, 2021:23, 2022:24, 2023:25, 2024:26, 2025:27, 2026:28, 2027:29, 2028:30, 2029:31,
    }

    paq = {
        1932:1,  1933:2,  1934:3, 1935:4, 1936:5, 1937:6, 1938:7, 1939:8,
        1940:9,  1941:10, 1942:11, 1943:12, 1944:13, 1945:14, 1946:15, 1947:16, 1948:17, 1949:18,
        1950:19, 1951:20, 1952:21, 1953:22, 1954:23, 1955:24, 1956:25, 1957:26, 1958:27, 1959:28,
        1960:29, 1961:30, 1962:31, 1963:32, 1964:33, 1965:34, 1966:35, 1967:36, 1968:37, 1969:38,
        1970:39, 1971:40, 1972:41, 1973:42, 1974:43, 1975:44, 1976:45, 1977:46, 1978:47, 1979:48,
        1980:49, 1981:50, 1982:51, 1983:52, 1984:53, 1985:54, 1986:55, 1987:56, 1988:57, 1989:58,
        1990:59, 1991:60, 1992:61, 1993:62, 1994:63, 1995:64, 1996:65, 1997:66, 1998:67, 1999:68,
        2000:69, 2001:70, 2002:71, 2003:72, 2004:73, 2005:74, 2006:75, 2007:[76, "76S"], 2008:77, 2009:78,
        2010:79, 2011:80, 2012:81, 2013:82, 2014:83, 2015:84, 2016:85, 2017:86, 2018:87, 2019:88,
        2020:89, 2021:90, 2022:91, 2023:92, 2024:93, 2025:94, 2026:95, 2027:96, 2028:97, 2029:98,
    }

    pb = {
        1990:1,  1991:2, 1992:3, 1993:4, 1994:5, 1995:6, 1996:7, 1997:8, 1998:9, 1999:10
        # ended
    }

    #  new journals for 2022
    ijfp = {
        2019:1,
        2020:2, 2021:3, 2022:4, 2023:5, 2024:6, 2025:7, 2026:8, 2027:9, 2028:10, 2029:11
    }

    pcas = {
        1996:1, 1997:2, 1998:3, 1999:4,
        2000:5, 2001:6, 2002:7, 2003:8, 2004:9, 2005:10, 2006:11, 2007:12, 2008:13, 2009:14,
        2010:15, 2011:16, 2012:17, 2013:18, 2014:19, 2015:20, 2016:21, 2017:22, 2018:23, 2019:24,
        2020:25, 2021:26, 2022:27, 2023:28, 2024:29, 2025:30, 2026:31, 2027:32, 2028:33, 2029:34,
    }

    jpt = {
        2016:1, 2017:2, 2018:3, 2019:4,
        2020:5, 2021:6, 2022:7, 2023:8, 2024:9, 2025:10, 2026:11, 2027:12, 2028:13, 2029:14,
    }

    ppc = {
        2015:1, 2016:2,
        2020:3, 2021:4, 2022:5, 2023:6, 2024:7, 2025:8, 2026:9, 2027:10, 2028:11, 2029:12,
    }

    oeda = {
        2020:1, 2021:2, 2022:3, 2023:4, 2024:5, 2025:6, 2026:7, 2027:8, 2028:9, 2029:10,
    }

    pcs = {
        1972:1, 1973:2, 1974:3, 1975:4, 1976:5
        # ended
    }

    pct = {
        1978:1, 1979:2,
        1980:3, 1981:4, 1982:5, 1983:6, 1984:7, 1985:8, 1986:9, 1987:10, 1988:11, 1989:12,
        1990:13, 1991:14, 1992:15, 1993:16, 1994:17, 1995:18, 1996:19, 1997:20, 1998:21, 1999:22,
        2000:23, 2001:24, 2002:25, 2003:26
        # ended
    }

    pd =   {
        1991:1, 1992:2, 1993:3, 1994:4, 1995:5, 1996:6, 1997:7, 1998:8, 1999:9,
        2000:10, 2001:11, 2002:12, 2003:13, 2004:14, 2005:15, 2006:16, 2007:17, 2008:18, 2009:19,
        2010:20, 2011:21, 2012:22, 2013:23, 2014:24, 2015:25, 2016:26, 2017:27, 2018:28, 2019:29,
        2020:30, 2021:31, 2022:32, 2023:33, 2024:34, 2025:35, 2026:36, 2027:37, 2028:38, 2029:39,
    }

    pi =   {
        1981:1, 1982:[1,2], 1983:3, 1984:4, 1985:5, 1986:6, 1987:7, 1988:8, 1989:9,
        1990:10, 1991:11, 1992:12, 1993:13, 1994:14, 1995:15, 1996:16, 1997:17, 1998:18, 1999:19,
        2000:20, 2001:21, 2002:22, 2003:23, 2004:24, 2005:25, 2006:26, 2007:27, 2008:28, 2009:29,
        2010:30, 2011:31, 2012:32, 2013:33, 2014:34, 2015:35, 2016:36, 2017:37, 2018:38, 2019:39,
        2020:40, 2021:41, 2022:42, 2023:43, 2024:44, 2025:45, 2026:46, 2027:47, 2028:48, 2029:49,
    }

    # psychoanalytic perspectives, new for A1v11
    ppersp= {
        2003:1, 2004:2, 2005:[2,3], 2006:[3,4], 2007:[4,5], 2008:[5,6], 2009:6,
        2010:7, 2011:8, 2012:9, 2013:10, 2014:11, 2015:12, 2016:13, 2017:14, 2018:15, 2019:16,
        2020:17, 2021:18, 2022:19, 2023:20, 2024:21, 2025:22, 2026:23, 2027:24, 2028:25, 2029:26
    }

    # maybe this should be PDPSI?  New for A1v12 (continued from another journal)
    pdpsy= {
        2012:40, 2013:41, 2014:42, 2015:43, 2016:44, 2017:45, 2018:46, 2019:47,
        2020:48, 2021:49, 2022:50, 2023:51, 2024:52, 2025:54, 2026:55, 2027:56, 2028:57, 2029:58,
    }

    ppsy = {
        1984:1, 1985:2, 1986:3, 1987:4, 1988:5, 1989:6,
        1990:[7,"7s"], 1991:8, 1992:9, 1993:10, 1994:11, 1995:12, 1996:13, 1997:14, 1998:15, 1999:16,
        2000:17, 2001:18, 2002:19, 2003:20, 2004:21, 2005:22, 2006:23, 2007:24, 2008:25, 2009:26,
        2010:27, 2011:28, 2012:29, 2013:30, 2014:31, 2015:32, 2016:33, 2017:34, 2018:35, 2019:36,
        2020:37, 2021:38, 2022:39, 2023:40, 2024:41, 2025:42, 2026:43, 2027:44, 2028:45, 2029:46,
    }

    pptx = {
        1985:1, 1986:2, 1987:3, 1988:3, 1989:4,
        1990:5, 1991:5, 1992:6, 1993:7,  1994:8,  1995:9,  1996:10, 1997:11, 1998:12, 1999:13,
        2000:14, 2001:15, 2002:16, 2003:17, 2004:18, 2005:19, 2006:20, 2007:21, 2008:22, 2009:23,
        2010:24, 2011:25, 2012:26, 2013:27, 2014:28, 2015:29, 2016:30, 2017:31, 2018:32, 2019:33,
        2020:34, 2021:35, 2022:36, 2023:37, 2024:38, 2025:39, 2026:40, 2027:41, 2028:42, 2029:43,
    }

    psar = {
        1914:1,  1915:2,  1916:3, 1917:4, 1918:5, 1919:6,
        1920:7,  1921:8,  1922:9,  1923:10, 1924:11, 1925:12, 1926:13, 1927:14, 1928:15, 1929:16,
        1930:17, 1931:18, 1932:19, 1933:20, 1934:21, 1935:22, 1936:23, 1937:24, 1938:25, 1939:26,
        1940:27, 1941:28, 1942:29, 1943:30, 1944:31, 1945:32, 1946:33, 1947:34, 1948:35, 1949:36,
        1950:37, 1951:38, 1952:39, 1953:40, 1954:41, 1955:42, 1956:43, 1957:44, 1958:45, 1959:46,
        1960:47, 1961:48, 1962:49, 1963:50, 1964:51, 1965:52, 1966:53, 1967:54, 1968:55, 1969:56,
        1970:57, 1971:58, 1972:59, 1973:60, 1974:61, 1975:62, 1976:63, 1977:64, 1978:65, 1979:66,
        1980:67, 1981:68, 1982:69, 1983:70, 1984:71, 1985:72, 1986:73, 1987:74, 1988:75, 1989:76,
        1990:77, 1991:78, 1992:79, 1993:80, 1994:81, 1995:82, 1996:83, 1997:84, 1998:85, 1999:86,
        2000:87, 2001:88, 2002:89, 2003:90, 2004:91, 2005:92, 2006:93, 2007:94, 2008:95, 2009:96,
        2010:97, 2011:98, 2012:99, 2013:00, 2014:101, 2015:102, 2016:103, 2017:104, 2018:105, 2019:106,
        2020:107, 2021:108, 2022:109, 2023:110, 2024:111, 2025:112, 2026:113, 2027:114, 2028:115, 2029:116,
    }

    # 2012-04-09 changed 2011 to 65, and 2012 to 66.  There wasn't a 2010 volume (updated 2012-09-15,
    #   eliminated 2010, more definitive!)
    #  No 2016 volume!

    psc = {
        1945:1, 1946:2, 1949:[3,4],
        1950:5, 1951:6, 1952:7, 1953:8, 1954:9, 1955:10, 1956:11, 1957:12, 1958:13, 1959:14,
        1960:15, 1961:16, 1962:17, 1963:18, 1964:19, 1965:20, 1966:21, 1967:22, 1968:23, 1969:24,
        1970:25, 1971:26, 1972:27, 1973:28, 1974:29, 1975:30, 1976:31, 1977:32, 1978:33, 1979:34,
        1980:35, 1981:36, 1982:37, 1983:38, 1984:39, 1985:40, 1986:41, 1987:42, 1988:43, 1989:44,
        1990:45, 1991:46, 1992:47, 1993:48, 1994:49, 1995:50, 1996:51, 1997:52, 1998:53, 1999:54,
        2000:55, 2001:56, 2002:57, 2003:58, 2004:59, 2005:60, 2006:61, 2007:62, 2008:63, 2009:64,
        2011:65, 2012:66, 2013:67, 2014:68, 2015:69, 2016:None, 2017:70, 2018:71, 2019:72, 2020:73,
        2021:75, 2022:76, 2023:77, 2024:78, 2025:79, 2026:80, 2027:81, 2028:82, 2029:83, 2020:84,
    }


    psp = {
        1985:1, 1986:2, 1988:[3,4], 1989:5,
        1990:6, 1991:7, 1992:8, 1993:9, 1994:10, 1995:11, 1996:12, 1997:13, 1998:14, 1999:15,
        2000:16, 2001:17, 2002:18, 2003:19, 2004:20, 2005:21, 2006:22, 2007:23, 2008:24, 2009:25,
        2010:26, 2011:27, 2012:28, 2013:29, 2014:30, 2015:31, 2016:32, 2017:33, 2018:34, 2019:35,
        2020:36, 2021:37, 2022:38, 2023:39, 2024:40, 2025:41, 2026:42, 2027:43, 2028:44, 2029:45,
    }

    psyche = {
        1947:1,       1948:[1,2],   1949:[2, 3],
        1950:[3,4],   1951:[4,5],   1952:[5,6],   1953:[6,7],    1954:[7,8],  1955:[8,9],   1956:[9,10], 1957:[10,11], 1958:[11,12], 1959:[12,13],
        1960:[13,14], 1961:[14,15], 1962:[15,16], 1963:[16,17], 1964:[17,18], 1965:[18,19], 1966:20,     1967:21,      1968:22,      1969:23,
        1970:24, 1971:25, 1972:26, 1973:27, 1974:28, 1975:29, 1976:30, 1977:31, 1978:32, 1979:33,
        1980:34, 1981:35, 1982:36, 1983:37, 1984:38, 1985:39, 1986:40, 1987:41, 1988:42, 1989:43,
        1990:44, 1991:45, 1992:46, 1993:47, 1994:48, 1995:49, 1996:50, 1997:51, 1998:52, 1999:53,
        2000:54, 2001:55, 2002:56, 2003:57, 2004:58, 2005:59, 2006:60, 2007:61, 2008:62, 2009:63,
        2010:64, 2011:65, 2012:66, 2013:67, 2014:68, 2015:69, 2016:70, 2017:71, 2018:72, 2019:73,
        2020:74, 2021:75, 2022:76, 2023:77, 2024:78, 2025:79, 2026:80, 2027:81, 2028:82, 2029:83,
    }

    psu = {
        1967:1,  1968:2,  1969:3,
        1970:4,  1971:5,  1972:6,  1973:7,  1974:8,  1975:9,  1976:10, 1977:11, 1978:12, 1979:13,
        1980:14, 1981:15, 1982:16, 1983:17, 1984:18, 1985:19, 1986:20, 1987:21, 1988:22, 1989:23,
        1990:24, 1991:25, 1992:26, 1993:27, 1994:28, 1995:29, 1996:30, 1997:31, 1998:32, 1999:33,
        2000:34, 2001:35, 2002:36, 2003:37, 2004:38, 2005:39, 2006:40, 2007:41, 2008:42, 2009:43,
        2010:44, 2011:45, 2012:46, 2013:47, 2014:48, 2015:49, 2016:50, 2017:51, 2018:52, 2019:53,
        2020:54, 2021:55, 2022:56, 2023:57, 2024:58, 2025:59, 2026:60, 2027:61, 2028:62, 2029:63,
    }

    psw = {
        1994:1,  1995:2,  1996:3,  1998:4,  1998:5,  1999:6,
        2000:7,  2001:8,  2002:9,  2003:10, 2004:11, 2005:12, 2006:13, 2007:14, 2008:15, 2009:16,
        2010:17, 2011:18, 2012:19, 2013:20, 2014:21, 2015:22, 2016:23, 2017:24, 2018:25, 2019:26,
        2020:27, 2021:28, 2022:29, 2023:30, 2024:31, 2025:32, 2026:33, 2027:34, 2028:35, 2029:36,
    }

    py = {
        2000:1, 2001:[2, 3], 2002:[4, 5], 2003:[6, 7], 2004:[8, 9], 2005:[10, 11], 2006:[12, 13], 2007:[14, 15],
        2008:[16, 17], 2009:[18, 19], 2010:[20, 21], 2011:[22, 23], 2012:[24, 25], 2013:[26, 27], 2014:[28, 29], 2015:[30, 31],
        2016:[32, 33], 2017:[34, 35], 2018:[36, 37], 2019:[38, 39],
        2020:[40, 41], 2021:[42, 43], 2022:[44, 45], 2023:[46, 47], 2024:[48, 49], 2025:[50, 51], 2026:[52, 53], 2027:[54, 55], 2028:[56, 57], 2029:[58, 59],
    }

    rbp =    {
        1982:1, 1983:[2,3], 1984:[4, 5], 1985:[6, 7], 1986:[8, 9], 1987:[10,11], 1988:[12, 13], 1989:[14, 15],
        1990:[16, 17], 1991:[18, 19], 1992:[20, 21], 1993:[22, 23], 1994:[24, 25], 1995:[26, 27], 1996:[28, 29], 1997:[30, 31], 1998:[32, 33], 1999:[34, 35],
        2000:[36, 37], 2001:[38, 39], 2002:[40, 41], 2003:[42, 43], 2004:[44, 45], 2005:[46, 47], 2006:[48, 49], 2007:[50, 51],
        2008:[52, 53], 2009:[54, 55], 2010:[56, 57], 2011:[58, 59], 2012:[60, 61], 2013:[62, 63], 2014:[64, 65], 2015:[66, 67], 2016:[68, 69], 2017:[70, 71], 2018:[72, 73], 2019:[74, 75],
        2020:[76, 77], 2021:[78, 79], 2022:[80, 81], 2023:[82, 83], 2024:[84, 85], 2025:[86, 87], 2026:[88, 89], 2027:[90, 91], 1998:[92, 93], 1999:[94, 95],
    }

    rfp =    {
        1927:1, 1928:2, 1929:3,
        1930:4,  1931:5,  1932:5, 1933:6, 1934:7, 1935:8, 1936:9, 1937:9, 1938:10, 1939:11,
        1948:12, 1949:13,
        1950:14, 1951:15, 1952:16, 1953:17, 1954:18, 1955:19, 1956:20, 1957:21, 1958:22, 1959:23,
        1960:24, 1961:25, 1962:26, 1963:27, 1964:28, 1965:29, 1966:30, 1967:31, 1968:32, 1969:33,
        1970:34, 1971:35, 1972:36, 1973:37, 1974:38, 1975:39, 1976:40, 1977:41, 1978:42, 1979:43,
        1980:44, 1981:45, 1982:46, 1983:47, 1984:48, 1985:49, 1986:50, 1987:51, 1988:52, 1989:53,
        1990:54, 1991:55, 1992:56, 1993:57, 1994:58, 1995:59, 1996:60, 1997:61, 1998:62, 1999:63,
        2000:64, 2001:65, 2002:66, 2003:67, 2004:68, 2005:69, 2006:70, 2007:71, 2008:72, 2009:73,
        2010:74, 2011:75, 2012:76, 2013:77, 2014:78, 2015:79, 2016:80, 2017:81, 2018:82, 2019:83,
        2020:84, 2021:85, 2022:86, 2023:87, 2024:88, 2025:89, 2026:90, 2027:91, 2028:92, 2029:93,
    }

    revapa = {
        1943:1,  1944:[1,2], 1945:[2,3], 1946:[3,4], 1947:[4,5], 1948:[5,6], 1949:[6,7],
        1950:7,  1951:8, 1952:9, 1953:10, 1954:11, 1955:12, 1956:13, 1957:14, 1958:15, 1959:16,
        1960:17, 1961:18, 1962:19, 1963:20, 1964:21, 1965:22, 1966:23, 1967:24, 1968:25, 1969:26,
        1970:27, 1971:28, 1972:29, 1973:30, 1974:31, 1975:32, 1976:33, 1977:34, 1978:35, 1979:36,
        1980:37, 1981:38, 1982:39, 1983:40, 1984:41, 1985:42, 1986:43, 1987:44, 1988:45, 1989:46,
        1990:47, 1991:48, 1992:49, 1993:50, 1994:51, 1995:52, 1996:53, 1997:54, 1998:55, 1999:56,
        2000:57, 2001:58, 2002:59, 2003:60, 2004:61, 2005:62, 2006:63, 2007:64, 2008:65, 2009:66,
        2010:67, 2011:68, 2012:69, 2013:70, 2014:71, 2015:72, 2016:73, 2017:74, 2018:75, 2019:76,
        2020:77, 2021:78, 2022:79, 2023:80, 2024:81, 2025:82, 2026:83, 2027:84, 2028:85, 2029:86,
    }

    # Revista (RPSA) first three volumes were under a different name, and counted differently
    rip =    {
        1932: 1, 1933:2, 1934:3,
        # ended
    }

    # Int. Journal of Psychoanal.
    rrp = {
        2008:1, 2009:2,
        2010:3, 2011:4, 2012:5, 2013:6, 2014:7, 2015:8, 2016:9, 2017:10, 2018:11, 2019:12,
        2020:13, 2021:14, 2022:15, 2023:16, 2024:17, 2025:18, 2026:19, 2027:20, 2028:21, 2029:22,
    }

    rpsa =  {
        1955: 1, 1956: 2, 1957: 3, 1958: 4, 1959: 5,
        1960: 6, 1961: 7, 1962: 8, 1963: 9, 1964:10, 1965:11, 1966:12, 1967:13, 1968:14, 1969:15,
        1970:16, 1971:17, 1972:18, 1973:19, 1974:20, 1975:21, 1976:22, 1977:23, 1978:24, 1979:25,
        1980:26, 1981:27, 1982:28, 1983:29, 1984:30, 1985:31, 1986:32, 1987:33, 1988:34, 1989:35,
        1990:36, 1991:37, 1992:38, 1993:39, 1994:40, 1995:41, 1996:42, 1997:43, 1998:44, 1999:45,
        2000:46, 2001:47, 2002:48, 2003:49, 2004:50, 2005:51, 2006:52, 2007:53, 2008:54, 2009:55,
        2010:56, 2011:57, 2012:58, 2013:59, 2014:60, 2015:61, 2016:62, 2017:63, 2018:64, 2019:65,
        2020:66, 2021:67, 2022:68, 2023:69, 2024:70, 2025:71, 2026:72, 2027:73, 2028:74, 2029:75,
    }

    rppcs = {
        1999:1, 2000:2, 2001:3, 2002:4, 2003:5, 2004:6, 2005:7, 2006:8, 2007:9, 2008:10, 2009:11,
        2010:12, 2011:13, 2012:14, 2013:15, 2014:16, 2015:17, 2016:18, 2017:19, 2018:20, 2019:21,
        2020:22, 2021:23, 2022:24, 2023:25, 2024:26, 2025:27, 2026:28, 2027:29, 2028:30, 2029:31,
    }

    spr  = {
        1978:1, 1979:2,
        1980:3, 1981:4, 1982:5, 1983:6, 1984:7, 1985:8, 1986:9, 1987:10, 1988:11, 1989:12,
        1990:13, 1991:14, 1992:15, 1993:16, 1994:17, 1995:18, 1996:19, 1997:20, 1998:21, 1999:22,
        2000:23, 2001:24, 2002:25, 2003:26, 2004:27, 2005:28, 2006:29, 2007:30, 2008:31, 2009:32,
        2010:33, 2011:34, 2012:35, 2013:36, 2014:37, 2015:38, 2016:39, 2017:40, 2018:41, 2019:42,
        2020:43, 2021:44, 2022:45, 2023:46, 2024:47, 2025:48, 2026:49, 2027:50, 2028:51, 2029:52,
    }


    se = {
        1966: 1,
            1955: 2,
            1962: 3,
            1953: 4,
            1953: 5,
            1960: 6,
            1953: 7,
            1960: 8,
            1959: 9,
            1955: 10,
            1957: 11,
            1958: 12,
            1955: 13,
            1957: 14,
            1963: 15,
            1963: 16,
            1955: 17,
            1955: 18,
            1955: 19,
            1959: 20,
            1960: 21,
            1964: 22,
            1964: 23,
            1974: 24
#                 1886:1, 1887:1, 1889:1, 1966:1, 1955:2, 1962:3, 1953:4, 1953:5, 1960:6, 1953:7, 1960:8, 1959:9,
#                 1955:10, 1960:11, 1960:12, 1960:13, 1915:14, 1960:14, 1960:15, 1960:16, 1960:17, 1960:18, 1960:19, 1960:20,
#             1960:21, 1960:22, 1960:23, 1960:24, 1960:25, 1960:26, 1960:27, 1960:28, 1960:29
    }

    gw = {
        1892 :  17,
        1893 :  1,
        1894 :  1,
        1895 :  1,
        1896 :  1,
        1897 :  1,
        1898 :  1,
        1899 :  1,
        1900 :  2,
        1901 :  [2,  4, 5],
        1904 :  5  ,
        1905 :  [5, 6],
        1906 :  [1, 7],
        1907 :  7,
        1908 :  7,
        1909 :  7,
        1910 :  8,
        1911 :  8,
        1912 :  8,
        1913 :  [8, 9, 10],
        1914 :  [10, 12],
        1915 :  [10, 11],
        1916 :  10 ,
        1917 :  [10, 12],
        1919 :  12,
        1920 :  [12, 13],
        1921 :  [13, 17],
        1922 :  [13, 17],
        1923 :  13,
        1924 :  14,
        1925 :  [1, 14],
        1926 :  14,
        1927 :  14,
        1929 :  14,
        1930 :  14,
        1931 :  [14, 16],
        1932 :  16 ,
        1933 :  [15, 16],
        1935 :  16,
        1936 :  16,
        1937 :  16,
        1938 :  17,
        1940 :  17,
        1991 :  [1, 5, 10, 14],
        1993 :  [7, 16, 17],
        1996 :  [8, 9],
        1998 :  [11, 13],
        2005 :  [4, 12],
        2008 :  [2, 6, 15, 18]
    }


    sePageRanges = {
        1: 430,
        2: 335,
        3: 354,
        4: 338,
        5: 752,
        6: 310,
        7: 336,
        8: 258,
        9: 280,
        10: 342,
        11: 264,
        12: 374,
        13: 264,
        14: 374,
        15: 240,
        16: 496,
        17: 304,
        18: 296,
        19: 320,
        20: 306,
        21: 287,
        22: 282,
        23: 326,
        24: 468,
    }

    sgs  = {
        2000:1,  2001:2,  2002:3,  2003:4,  2004:5,  2005:6,  2006:7,  2007:8,  2008:9,  2009:10,
        2010:11, 2011:12, 2012:13, 2013:14, 2014:15, 2015:16, 2016:17, 2017:18, 2018:19, 2019:20,
        2020:21, 2021:22, 2022:23, 2023:24, 2024:25, 2025:26, 2026:27, 2027:28, 2028:29, 2029:30,
    }


    tvpa  = {
        1995:1,  1996:2,  1997:3,  1998:4,  1999:5,
        2000:6,  2001:7,  2002:8,  2003:9,  2004:10, 2005:11, 2006:12, 2007:13, 2008:14, 2009:15,
        2010:16, 2011:17, 2012:18, 2013:19, 2014:20, 2015:21, 2016:22, 2017:23, 2018:24, 2019:25,
        2020:26, 2021:27, 2022:28, 2023:29, 2024:30, 2025:31, 2026:32, 2027:33, 2028:34, 2029:35,
    }


    all = {
        "ADPSA":adpsa,
        "AIM":aim,
        "AJP":ajp,
        "AJRPP": ajrpp,
        "ANIJP-DE":anijpde,
        "ANIJP-EL":anijpel,
        "ANIJP-FR":anijpfr,
        "ANIJP-IT":anijpit,
        "ANIJP-TR":anijptr,
        "ANRP":anrp,
        "AOP":aop,
        "APA":apa,
        "APM":apm,
        "APS":aps,
        "BAFC":bafc,
        "BAP":bap,
        "BIP":bip,
        "BJP":bjp,
        "CFP":cfp,
        "CJP":cjp,
        "CPS":cps,
        "DR":dr,
        "FA":fa,
        "FD":fd,
        "GAP":gap,
        "GW":gw,
        "IFP":ifp,
        "IJAPS":ijaps,
        "IJFP": ijfp,
        "IJP":ijp,
        "IJPOPEN":ijpopen,
        "IJP-ES":ijpes,
        "IJPSP":ijpsp,
        "IJPSPPSC":ijpsppsc,
        "IMAGO":imago,
        "IRP":irp,
        "IZPA":izpa,
        "JAA":jaa,
        "JBP":jbp,
        "JCP":jcp,
        "JCPTX":jcptx,
        "JEP":jep,
        "JICAP":jicap,
        "JOAP":joap,
        "JPPF":jppf,
        "JPT": jpt,
        "MPSA":mpsa,
        "LU-AM":luam,
        "NP":np,
        "OEDA": oeda,
        "OFFSITE":offsite,
        "OPUS": opus,
        "PAH": pah,
        "PAQ":paq,
        "PB":pb,
        "PCAS":pcas,
        "PCS":pcs,
        "PCT":pct,
        "PD":pd,
        "PDPSY":pdpsy,
        "PI":pi,
        "PPC": ppc,
        "PY":py,
        "PPERSP":ppersp,
        "PPSY":ppsy,
        "PPTX":pptx,
        "PSABEW":psabew,
        "PSAR":psar,
        "PSC":psc,
        "PSP":psp,
        "PSU":psu,
        "PSW":psw,
        "PSYCHE": psyche,
        "RBP": rbp,
        "REVAPA": revapa,
        "RFP": rfp,
        "RIP": rip,
        "RPP-CS": rppcs,
        "RPSA": rpsa,
        "RRP": rrp,
        "SE":se,
        "SGS":sgs,
        "SPR":spr,
        "TVPA":tvpa,
        "ZBPA":zbpa,
        "ZPSAP":zpsap,
    }


    #as checked in http://journalseek.net/cgi-bin/journalseek/
    # Note though they had:
    #           Int Rev Psycho Anal
    #           J Am Acad Psychoanal Dyn Psychiatr
    #               (Note also I found we had the wrong ISSN for this journal!)
    #               Info at: http://www.guilford.com/cgi-bin/cartscript.cgi?page=pr/jnap.htm&dir=periodicals/per_psych&cart_id=
    #           No abbrev listed for Neuro-Psychoanalysis
    #           No abbrev listed for Psychoanalytic Dialogues
    #           PSC had wrong ISSN!
    #           Had Psychoanal. Stud. Child, but that's stupid to substitute the y for a .
    #
    # 2009-12-03 Removed hyphen from Neuropsychoanalysis per request in Sept
    jrnlAbbr = {
        # new journals
        # prior journals
        "ADPSA"     : "Almanach d. PsA.",
        "AIM"       : "Am. Imago",
        "AJP"       : "Am. J. Psychoanal.",
        "AJRPP"     : "Att: New Dir. Relat. Psychoanal. Psychother.",                  # found instances and not abbreviated, at least in AJRPP self citations.
        "ANRP"      : "Ital. Psychoanal. Annu.",
        "ANIJP-CHI" : "Chinese Ann. Psychoanal.",
        "ANIJP-DE"  : "Int. Psychoanalyse",
        "ANIJP-EL"  : "Ετήσια ελληνική έκδοση",                                           # new
        "ANIJP-FR"  : "L'Annee Psychanal. Int.",
        "ANIJP-IT"  : "L'Annata Psicoanal. Int.",
        "ANIJP-TR"  : "Ulusl. Psikanaliz Yıll.",                                           # from Nilüfer Erdem email 2013-09-23
        "AOP"       : "Annu. Psychoanal.",
        "APA"       : "J. Amer. Psychoanal. Assn.",
        "APM"       : "Rev. Psicoanál. Asoc. Psico. Madrid",                              # A1v14 (2014) from journal form
        "APS"       : "J. Appl. Psychoanal. Stud.",
        "BAP"       : "Bul. Amer. Psychoanal. Assn.",
        "BAFC"      : "Bul. Anna Freud Centre",
        "BIP"       : "Bul. Int. Psychoanal. Assn.",
        "BJP"       : "Brit. J. Psychother.",
        "BPSIVS"    : "Bos. Psychoanal. Soc. Inst.",                                       # new 6/25/2014
        "CFP"       : "Cpl. Fam. Psychoanal.",                                             # not seen, made up from other uses of the terms
        "CJP"       : "Can. J. Psychoanal.",
        "CPS"       : "Contemp. Psychoanal.",
        "DR"        : "DIVISION/Rev.",
        "FA"        : "Free Associations",
        "FD"        : "Fort Da",
        "GAP"       : "Gender and Psychoanal.",
        "GW"        : "Gesammelte Werke",
        "IFP"       : "Int. Forum Psychoanal.",
        "IJP"       : "Int. J. Psychoanal." ,
        "IJPOPEN"   : "Int. J. Psychoanal. Open" ,
        "IJAPS"     : "Int. J. Appl. Psychoanal. Stud.",
        "IJP-ES"    : "Int. J. Psychoanal. Es.",
        "IJPSP"     : "Int. J. Psychoanal. Self Psychol.",
        "IJPSPPSC"  : "Psychonal. Self Cxt.",
        "IMAGO"     : "Imago",
        "IPL"       : "Int. Psycho-Anal. Lib. ",
        "IRP"       : "Int. Rev. Psycho-Anal.",
        "IZPA"      : "Int. Z. Psychoanal.",
        "JAA"       : "J. Am. Acad. Psychoanal. Dyn. Psychiatr.",
        "JBP"       : "Jahrb. Psychoanal.",
        "JCP"       : "J. Clin. Psychoanal.",
        "JCPTX"     : "J. Child Psychother.",
        "JEP"       : "J. Eur. Psychoanal.",
        "JICAP"     : "J. Infant Child Adolesc. Psychother.",
        "JOAP"      : "J. Anal. Psychol.",
        "JPPF"      : "Jahrb. Psychoanalyt. Psych. Forsch.",

        "IJFP"      : "Int. J. Forens. Psychoanal.",
        "JPT"       : "J. Psych. Ther.",
        "OEDA"      : "Oed. Ann.",
        "PPC"       : "Psychoanal. Psychother. China",

        "KAPA"      : "J. Korean Assoc. Psychoanal.",
        "LU-AM"     : "Luzifer-Amor",
        "MPSA"      : "Mod. Psychoanal.",
        "NP"        : "Neurpsychoanalysis",
        "NLPX"      : "New Lib. of Psycho-Anal.",
        "NLP"       : "New Library of Psychoanalysis",
        "NYPSIVS"   : "N.Y. Psychoanal. Soc. Inst.",
        "OFFSITE"   : "Offsite Articles",
        "OPUS"      : "Organ. Soc. Dyn.",
        "PAQ"       : "Psychoanal. Q.",
        "PAH"       : "Psychoanal. Hist.",
        "PB"        : "Psa. Books",
        "PCT"       : "Psychoanal. Contemp Thought",
        "PCAS"      : "Psychoanal. Cult. Soc.",
        "PCS"       : "Psychoanal. Contemp Sci",
        "PD"        : "Psychoanal. Dial.",
        "PDPSY"     : "Psychodyn. Psi.",
        "PI"        : "Psychoanal. Inq.",
        "PPERSP"    : "Psychoanal. Persp.",
        "PPSY"      : "Psychoanal. Psychol.",
        "PPTX"      : "Psychoanal. Psychother.",
        "PSABEW"    : "Psychoanal. Bew.",
        "PSAR"      : "Psychoanal. Rev.",
        "PSC"       : "Psychoanal. Study Child",
        "PSP"       : "Progr. Self Psychol.",
        "PSYCHE"    : "Psyche",
        "PSU"       : "Psicoter. Sci. Um.",
        "PSW"       : "Psychoanal. Soc. Work",
        "PY"        : "Psk. Yaz.",
        "RBP"       : "Rev. Belg. Psychanal.",
        "REVAPA"    : "Rev. Psicoanal.",
        "RFP"       : "Rev. Fr. Psychanal.",
        "RIP"       : "Rivista Italian Psicoanal.",
        "RPP-CS"    : "Rev. psychoanal. psychoter.",
        "RPSA"      : "Rivista Psicoanal.",
        "RRP"       : "Rom. J. Psychoanal.",
        "SE"        : "Standard Edition",
        "SGS"       : "Stud. Gend. Sex.",
        "SPR"       : "Scand. Psychoanal. Rev.",
        "TVPA"      : "Tijdschr. Psychoanal.",
        "ZBPA"      : "Zbl. Psyca",
        "ZBK"       : "Classic Books",
        "ZPSAP"     : "Z. Psychoanalyt Pädagogik",
        # videostreams
        "AFCVS"     : "A. Freud Ctr. Vid. Coll.",
        "PCVS"      : "Ph. Ctr. Vid. Coll.",
        "PEPVS"     : "PEP Vid. Coll.",
        "PEPGRANTVS" : "PEP Grant Proj. Vid. Coll.",
        "PEPTOPAUTHVS" : "PEP/UCL Top Aut. Proj. Vid Coll.",
        "UCLVS"     : "U. Coll. London Vid. Coll.",
        "IPSAVS"    : "Inst. Psychoanal. Vid. Coll.",
        "IJPVS"     : "Int. J. Psychoanal. Vid. Coll..",
        "SFCPVS"    : "San Franc. Cntr for Psa. Vid. Coll.",
        "SPIVS"     : "Soc. Psi It. Vid. Coll."
    }

    # Journal names used for TOJ indexes
    jrnlFull = {
        # new journals
        # prior journals
        "ADPSA"     : "Almanach der Psychoanalyse",
        "AIM"       : "American Imago",
        "AJP"       : "American Journal of Psychoanalysis",                                 # new
        "AJRPP"     : "Attachment: New Directions in Relational Psychoanalysis and Psychotherapy",
        "AOP"       : "Annual of Psychoanalysis",
        "ANRP"      : "Italian Psychoanalytic Annual",
        "ANIJP-CHI" : "Chinese Annual of Psychoanalysis",
        "ANIJP-DE"  : "Int. Psychoanalyse",
        "ANIJP-EL"  : "Ετήσια ελληνική έκδοση",                                            # new
        "ANIJP-IT"  : "Annata Psicoanalitica Internazionale",
        "ANIJP-FR"  : "Annee Psychanalytique Internationale",
        "ANIJP-TR"  : "Turkish Annual of Psychanal. Int.",                                  # new (just a temporary title to hold this XXX)
        "APA"       : "Journal of the American Psychoanalytic Association",
        "APM"       : "Journal Revista de Psicoanálisis",                                   # A1v14 (2014)
        "APS"       : "Journal of Applied Psychoanalytic Studies",                          # v2017 (related to IJAPS, precursor)
        "BAFC"      : "Bulletin of the Anna Freud Centre",
        "BAP"       : "Bulletin of the American Psychoanalytic Association",
        "BIP"       : "Bulletin of the International Psycho-Analytical Association",
        "BJP"       : "British Journal of Psychotherapy",
        "CFP"       : "Couple and Family Psychoanalysis",                                    # new
        "BPSIVS"    : "Boston Psychoanalytic Society and Institute",                         # new 6/25/2014
        "CJP"       : "Canadian Journal of Psychoanalysis",
        "CPS"       : "Contemporary Psychoanalysis",
        "DR"        : "DIVISION/Review: A Quarterly Psychoanalytic Forum",
        "FA"        : "Free Associations",                                                  # re-new
        "FD"        : "Fort Da",
        "GAP"       : "Gender and Psychoanalysis",
        "GW"        : "Gesammelte Werke",
        "IFP"       : "International Forum of Psychoanalysis",

        "IJFP"      : "The International Journal of Forensic Psychotherapy",
        "JPT"       : "Journal of Psychological Therapies",
        "OEDA"      : "Oedipus Annual - Greek Annual Psychoanalytic Review",
        "PPC"       : "Psychoanalysis and Psychotherapy in China",

        "IJP"       : "International Journal of Psycho-Analysis" ,
        "IJPOPEN"   : "International Journal of Psycho-Analysis Open" ,
        "IJAPS"     : "International Journal of Applied Psychoanalytic Studies",
        "IJP-ES"    : "International Journal of Psycho-Analysis en Espanol",
        "IJPSP"     : "International Journal of Psychoanalytic Self Psychology",
        "IJPSPPSC"  : "Psychoanalysis, Self, and Context",
        "IMAGO"     : "Imago",
        "IPL"       : "International Psycho-Analytical Library",
        "IRP"       : "International Review of Psycho-Analysis",
        "IZPA"      : "Internationale Zeitschrift für Psychoanalyse".encode("utf8"),
        "JAA"       : "Journal of the American Academy of Psychoanalysis and Dynamic Psychiatry",
        "JBP"       : "Jahrbuch Der Psychoanalyse",
        "JCP"       : "Journal of Clinical Psychoanalysis",
        "JCPTX"     : "Journal of Child Psychotherapy",
        "JEP"       : "Journal of European Psychoanalysis",                                 # Not yet
        "JICAP"     : "Journal of Infant, Child & Adolescent Psychotherapy",
        "JOAP"      : "Journal of Analytical Psychology",
        "JPPF"      : "Jahrbuch für psychoanalytische und psychopathologische Forschung",
        "KAPA"      : "Journal of Korean Association of Psychoanalysis",                    # A1v15
        "LU-AM"     : "Luzifer-Amor: Zeitschrift zur Geschichte der Psychoanalyse",         # A1v2019
        "MPSA"      : "Modern Psychoanalysis",
        "NP"        : "Neuropsychoanalysis",
        "NLPX"      : "New Library of Psycho-Analysis",
        "NLP"       : "New Library of Psychoanalysis",
        "NYPSIVS"   : "New York Psychoanalytic Society & Institute",
        "OFFSITE"   : "Offsite Articles",
        "OPUS"      : "Organizational and Social Dynamics",                                 # new
        "PAH"       : "Psychoanalysis and History",
        "PAQ"       : "Psychoanalytic Quarterly",
        "PB"        : "Psychoanalytic Books",
        "PCAS"      : "Psychoanalysis Culture and Society",
        "PCS"       : "Psychoanalysis and Contemporary Science",
        "PCT"       : "Psychoanalysis and Contemporary Thought",
        "PD"        : "Psychoanalytic Dialogues",
        "PDPSY"     : "Psychodynamic Psychiatry",
        "PI"        : "Psychoanalytic Inquiry",
        "PPERSP"    : "Psychoanalytic Perspectives",
        "PSAR"      : "Psychoanalytic Review",
        "PSC"       : "Psychoanalytic Study of the Child",
        "PSP"       : "Progress in Self Psychology",
        "PSU"       : "Psicoterapia e Scienze Umane",
        "PSW"       : "Psychoanalytic Social Work",
        "PPSY"      : "Psychoanalytic Psychology",
        "PPTX"      : "Psychoanalytic Psychotherapy",
        "PSABEW"    : "Psychoanalytische Bewegung",
        "PSYCHE"    : "Psyche",
        "PY"        : "Psikanaliz Yazıları",
        "RBP"       : "Revue Belge de Psychanalyse",
        "REVAPA"    : "Revista de psicoanálisis",
        "RFP"       : "Revue française de psychanalyse",
        "RIP"       : "Rivista Italiana di Psicoanalisi",
        "RPP-CS"    : "Revue psychoanalytická psychoterapie",
        "RRP"       : "Revue Roumaine de Psychoanalyse",
        "RPSA"      : "Rivista di Psicoanalisi",
        "SE"        : "Standard Edition",
        "SEX"       : "The Standard Edition of the Complete Psychological Works of Sigmund Freud",
        "SGS"       : "Studies in Gender and Sexuality",
        "SPR"       : "Scandinavian Psychoanalytic Review",
        "WMK"       : "Writings of Melanie Klein (book series)",
        "TVPA"      : "Tijdschrift voor Psychoanalyse",
        "ZBK"       : "Classic Books",
        "ZBPA"      : "Zentralblatt für Psychoanalyse",
        "ZPSAP"     : 'Zeitschrift f\xfcr psychoanalytische P\xe4dagogik'.encode("utf-8"),
        # video streams
        "AFCVS"     : "Anna Freud Center Video Collection",
        "PCVS"      : "Philoctetes Center Video Collection",
        "PEPVS"     : "PEP Videostream",
        "PEPGRANTVS" : "PEP Video Grants",
        "PEPTOPAUTHVS" : "PEP/UCL Top Authors Project",
        "UCLVS"     : "University College of London Video Collection",
        "IPSAVS"    : "Institute of Psychoanalysis Video Collection",
        "IJPVS"     : "International Journal of Psychoanalysis Video Collection",
        "SFCPVS"    : "San Francisco Center for Psychoanalysis Video Collection",
        "SPIVS"     : "Società Psicoanalitica Italiana  Video Collection"
    }


    # Journal codes which are returned from Patterns which are false positives, these are not processed as PEP Journals
    notInPEPList = ["IPP", "XPS", "FAP"] #, "MPSP"]
    nonEnglishJournals = ["APM", "JBP", "RBP", "RPSA", "RIP", "PSYCHE", "GW", "LU-AM", "ANIJP-CHI", "ANIJP-FR", "ANIJP-DE", "ANIJP-IT", "ANIJP-TR", "ANIJP-RU", "ANIJP-ES", "ANIJP-PT", "IJP-ES", "REVAPA"]


    # PEP journal patterns to use
    patOptOf = "(of\s+)?"
    patOptThe = "(The\s+)?"
    patOptIn = "(in\s*?)?"
    #patOptAnd = "(and\s+)?"
    patOptAnd = "((\&(amp;)?|and)\s*?)?"
    patReqdSpace = "\s+?"
    patOptSpace = "\s*?"
    patOptAndThe = "((\&\s+|and\s+)?the\s+)?"
    patAttachment = r"Attach(\b|\.|ment)"
    patBooks = "Books"
    patOptColon = "(\s?\:\s?)?"
    patDirections = "Directions"
    patIn = "in"
    patRelational = r"Relat(\b|\.|ional)"
    patOptOfThe = "(of\s+(the\s+)?)?"
    patOptDash = "(\s?\-\s?)?"              # optional dash with optional spaces (if the dash is there)
    patAcademy = "Acad(\.|emy)?"
    patAdolescent = r"Adolesc(\b|\.|ent)"
    patAmerican = r"(Am(er)?(\b|\.|ican))"
    patAnalytical = "(([Aa]nal)(ytic|ytical|yt)?(\.)?)"
    patAnnual = r"(Ann(\b|\.|u\.|ual))"
    patApplied = "Applied"
    patAssociation =  "(Ass(oc|n)?\.?|Association)"
    patAssociations =  "(Ass(oc|n)?s\.?|Associations)"
    patBulletin = r"Bul(l)?(n)?(\.|etin)"
    patBritish = r"Brit(.|ish)"
    patChinese = r"Chin(.|ese)"
    patChina = r"China"
    patChild = r"(Ch((ild)?(\b|\.)))"
    patClinical = r"C(\.|lin(\b|\.|ical)?)?"
    patContemporary = "\s*Contemp(\.|orary)"
    patContext = "\s*Cont(\.|ext)"
    patCouple = r"((Coup(le)?|Cpl)(\b|\.))"
    patCulture = r"C(\.|ult(\b|\.|ure)?)?"
    patDe = r"(de)?"
    patDialogues = r"((Dial|Dialogues|Dialog)(\.|\b))"
    patDynamic = r"(Dyn(amics?)?(\.|\b)?)"
    patFamily = "Fam(\.|ily)"
    patForum = "F(\.|orum)"
    patForensic = "F(\.|orensic|orens\.?)"
    patGender = "Gend(\.|er)?"
    patHistory = "His(\.|t\.?|tory)"
    patImago = r"Im(\b|\.|ago\.?)"
    patInternational = r"(I\.|Int(\b|l\.?|\.|ern(at)?(\.?|ional\.?)))" # Added I. 2012-03-15 variation seen in anijp-de
    patInquiry = "(Inq\.|Inquiry)"
    patInfant = "Infant"
    patJournal = r"(J(\b|\.|our\.?(nal)?))"
    patJahrBuch = r"Jahr\.?(b\.?(uch)?)?"
    patJournalOf = patJournal + "(\s+of\s*?)?"
    patJournalForThe = r"((J(\b|\.|our\.?(nal)?))(\s+for\s+the)?)?"
    patJPCS = "(\s+JPCS:\s*)?"
    patModern = r"Mod(\b|\.|ern)"
    patNew = "New"
    patOrganizat = r"Org(an|aniz|anization(al)?|anis|anisation(al)?)(\.|\b)"
    patOpen = r"(Open)"
    patOedipus = "Oed(\b|\.|ipus)" # 2022
    patProgress = r"Prog(r|ress)(\.|\b)"
    patPsychiatry =  "(Psychiatry)"
    patPsychoanalysis = "(Psa\.?|Psycho(\-?)(an\.?|anal\.?|analys(is)?))" # made ending required, otherwise it trips on similar names
    patPsychoanalytic = "(Psa.?|Psycho(\-?)anal(\.|ytic)?)" # use psa for this too, many references to psa rev.
    patPsychoanalytical = "Psycho(\-?)anal(\.|ytic|ytical)?"
    patPsychodynamic = r"Psychodyn(\b|\.|am\.|amic)"
    patPsychology = r"Psych(\b|ol|oi|ology)\.?"
    patPsychological = r"Psych(\b|ol|ological)\.?" # 2022
    patPerspectives = r"Pers(\b|p|pect|pectives?)\.?"
    patPsychotherapy = r"Psychother(\b|\.|apy)"
    patQuarterly = r"(Q(((\b|uart?)\.?)|erly))"
    patReview = r"(Rev(\b|\.|iew)|R(\b|\.))"
    patRevue = r"(Rev(\b|\.|ue)|R(\b|\.))"
    patRomanian = "Rom(anian|\.)"
    patRevista = r"Rev(\.|ista)"
    patRivista = r"Riv(\.|ista)"
    patScience = r"(Sci(\b|\.|ence))"
    patSocial = r"(Soc(\b|\.|ial))"
    patSociety = r"(Soc(\b|\.|iety))"
    patSelf = "Self\s+"
    patSelfPsychology = "self(\-?\s*?)" + patPsychology
    patSexuality = r"Sex(ual(ity)?)?(\b|\.)"
    patStudy = r"St(ud(y|ies)?)?(\b|\.)"
    patTherapies = "Ther(\.|ap\.?|apies)" # 2022
    patWork = "Work"


    # international
    patDer = "(der\s+)?"  # need the space here, since if der is missing, there won't be a space following, just the preceeding
    patEn = r"(en)"
    patEspanol = "(Espa[ñn]ol)"
    patFrancaise = "((fran[çc](aise)?(\.)?)|(fr(\.)))"
    patFur = "(für|fur|f\.?)"
    patGesch = "Geschichte"
    patInternationale = r"(I\.|Int(\b|l\.?|\.|ernat(\.?|ionale?\.?)))"
    patItalian = r"It(al(ian)?)?\.?"
    patCanadian = "Can(ad(ian|\.)|\.)?"
    patScandinavian = "(Scand(\.|in|inavian|anavian))"
    patEuropean = "(E(\.|ur(\.|opean)?)?)"
    patPsicoanalisi = "(Psa|Psicoanal(\.|isi))"
    patPsicoanalisis = "(Psa|psi|psicoan[áa]l(\.|isis))"
    patZentrablatt = "(Zentralblatt?|Zbl\.?|Zentrablatt)"
    patPadagogik = r"(Pädagogik|Päd|Pad)"
    patPsychoanalytika = "(Psa\.?|Psycho(\-?)(an\.?|anal\.?|analyt\.?(ika)?))" # czech - rpp-cs
    patPsychoanalytische = "(Psa\.?|Psycho(\-?)(an\.?|anal\.?|analyt\.?(ische)?))" # czech - rpp-cs
    patPsychoanalyse = "(Psa\.?|Psyca\.?|Psycho(\-?)(an\.?|anal\.?)|Psychoanalyse)"
    patPsychanalyse = "(Psa\.?|Psyca\.?|Psych(\-?)(an\.?|anal\.?)|Psychanalyse)"
    patPsychoterapie = r"psychoter(\b|\.|apie)" # czech rpp-cs
    patTVPATif = "Tijdschr(\.|ift)"
    patTVPAVoor = "voor"
    patZeit = "Zeitschrift\s+"
    patZeitschrift = r"(Z\.|Zeit(schrift|\.?)|Ztschr\.?|Ztscht\.?|Zeitschr\.?|Zs\.?|Zschr\.?)"
    patZur = "zur"


    jrnlPEPPatterns = {
        "AIM"          :       "\&AIM\;|" + patOptThe + patAmerican + patReqdSpace + patImago,
        "AJP"          :       "\&AJP\;|" + patAmerican + patReqdSpace + patJournal + patReqdSpace + patOptOf + patPsychoanalysis,
        "AJRPP"        :       "\&AJRPP\;|" + patAttachment + patOptColon + patNew + patReqdSpace + patDirections + patReqdSpace + patOptIn + patReqdSpace + patPsychotherapy + patReqdSpace + patOptAnd + patReqdSpace + patRelational + patReqdSpace + patPsychoanalysis + "(" + patReqdSpace + patJournal + ")?",
        "ANIJP-DE"     :       "\&ANIJPDE\;|" + patInternational + "Ausgewählte\s+Beiträge\s+aus\s+dem\s*\"?" + patInternational + patJournal + patOptOf + patPsychoanalysis + "\"?",
        "ANIJP-EL"     :       "\&ANIJPEL\;", # placeholder for full data XXX
        "ANIJP-CHI"    :       "\&ANIJPCHI\;|" + patChinese + patReqdSpace + patAnnual + patReqdSpace + patOptOf + patPsychoanalysis,
        "ANIJP-FR"     :       "\&ANIJPFR\;|(L\')?Ann(\xe9|e)e\s+Psychanalytique\s+Int(ern)?(.|ationale)",
        "ANIJP-IT"     :       "\&ANIJPIT\;|(L\')?Ann(ata)\s+Psicoan(alitica)\s+Int(ern)?(.|azionale)",
        "ANIJP-TR"     :       "\&ANIJPTR\;|Uluslararası\s+Psikanaliz\s+Yıllı(ğ|g)ı",
        "ANRP"         :       "\&ANRP\;|" + patItalian + patReqdSpace + patPsychoanalytic + patReqdSpace + patAnnual,
        "AOP"          :       "\&AOP\;|(The\s+?)?" + patAnnual + patReqdSpace + patOptOf + patPsychoanalysis,
        "APA"          :       "\&APA\;|JAPA|(" + patJournal + patReqdSpace + patOptOf + patOptThe + ")?" + patAmerican + patReqdSpace + patPsychoanalytic + patReqdSpace + patAssociation,
        "APM"          :       "\&APM\;|" + patRevista + patReqdSpace + patDe + patReqdSpace + "Psi(coan(a|á)lisis)?",
        "APS"          :       "\&APS\;|" + patJournalOf + patReqdSpace + patApplied + patReqdSpace + patPsychoanalytic + patReqdSpace + patStudy,
        "BAFC"         :       "\&BAFC\;|" + patBulletin + patReqdSpace + patOptOfThe + "(A(nna|\.)\s+?Freud\s+?(Cen(tre|\.|ter))|(Hamp(\.|stead)\s+Clin(\.|ic)))",
        "BAP"          :       "\&BAP\;|" + patBulletin + patReqdSpace + patOptOfThe + patAmerican + patReqdSpace + patPsychoanalytic + patReqdSpace + patAssociation,
        "BIP"          :       "\&BIP\;|" + patBulletin + patReqdSpace + patOptOfThe + patInternational + patReqdSpace + patPsychoanalytical + patReqdSpace + patAssociation,
        "BJP"          :       "\&BJP\;|" + patBritish + patReqdSpace + patJournal + patReqdSpace + patOptOf + patPsychotherapy,
        "CFP"          :       "\&CFP\;|" + patCouple + patReqdSpace + patOptAnd + patFamily + patReqdSpace + patPsychoanalysis,
        "CJP"          :       "\&CJP\;|" + patCanadian + patReqdSpace + patJournalOf + patReqdSpace + patPsychoanalysis,
        "CPS"          :       "\&CPS\;|" + patContemporary + patReqdSpace + patPsychoanalysis,
        "FA"           :       "\&FA\;|Free" + patReqdSpace + patAssociations,
        "DR"           :       "Div(\.|ision)?" + patReqdSpace + "Rev(.?|iew)?",
        "FD"           :       "\&FD\;|Fort\s+?Da\.?",
        "GAP"          :       "\&GAP\;|" + patGender + patReqdSpace + patOptAnd + patPsychoanalysis,
        "GW"           :       r"(?P<jrnlname>\&GW\;|GW|(G\.W\.)|Ges(\.|ammelte)\s+W(\.|erke))",
        "IFP"          :       "\&IFP\;|" + patInternational + patReqdSpace + patForum + patReqdSpace + patOptOf + patPsychoanalysis,
        # added version without spaces to IJP since it seems to be a mode of citing in ANIJP-DE
        "IJP"          :       "\&IJP\;|IJP|I\.J\.\s*(P\.(A\.)?|(Psycho\-?anal(.|ysis)?))|" + patOptThe + patInternational + patReqdSpace + patJournal + patReqdSpace + patOptOf + patPsychoanalysis + "(?!(\s+?Self))",
        "IJAPS"        :       "\&IJAPS\;|" + patInternational + patReqdSpace + patJournalOf + patReqdSpace + patApplied + patReqdSpace + patPsychoanalytic + patReqdSpace + patStudy,
        "IJPOPEN"      :       "\&IJP\;|" + patOptThe + patInternational + patReqdSpace + patJournal + patReqdSpace + patOptOf + patPsychoanalysis + patOpen,
        "IJPES"        :       "\&IJP\;|IJP|I\.J\.\s*(P\.(A\.)?|(Psycho\-?anal(.|ysis)?))|" + patOptThe + patInternational + patReqdSpace + patJournal + patReqdSpace + patOptOf + patPsychoanalysis + patEn + patEspanol,
        "IJPSP"        :       "\&IJPSP\;|" + patInternational + patReqdSpace + patJournalOf + patReqdSpace + patPsychoanalytic + patReqdSpace + patSelfPsychology,
        "IJPSPPSC"     :       "\&IJPSPPSC\;|" + patPsychoanalysis + patReqdSpace + patSelf + patReqdSpace + patOptAnd + patReqdSpace + patContext,
        "IMAGO"        :       "\&IMAGO\;|" + patImago,
        "IRP"          :       "\&IRP\;|" + patInternational + patReqdSpace + patReview + patReqdSpace + patOptOf + patPsychoanalysis,

        "IZPA"         :       "&IZPA\;|I\.?Z\.?f\.?[ ]*Ps\.?|" + "(" + patInternationale + patReqdSpace + ")?" + patZeitschrift + patReqdSpace + patFur + patReqdSpace + patPsychoanalyse + "$",

        "JAA"          :       "\&JAA\;|" + patJournalOf + patReqdSpace + patOptThe + patAmerican + patReqdSpace + patAcademy + patReqdSpace + patOptOf + patPsychoanalysis + "(" + patReqdSpace + patOptAnd + patDynamic + patReqdSpace + patPsychiatry + ")?",
        "JCP"          :       "\&JCP\;|" + patJournalOf + patReqdSpace + patClinical + patReqdSpace + patPsychoanalysis,
        "JCPTX"        :       "\&JCPTX\;|" + patJournal + patReqdSpace + patOptOf + patChild + patReqdSpace + patPsychotherapy,
        "JBP"          :       "\&JBP\;|" + patJahrBuch + patReqdSpace + patDer + patPsychoanalyse,
        "JEP"          :       "\&JEP\;|" + patJournalOf + patReqdSpace + patEuropean + patReqdSpace + patPsychoanalysis,
        "JICAP"        :       "\&JICAP\;|" + patJournal + patReqdSpace + patOptOf + patInfant + "(\s*?,?\s+?)" + patChild + ",?" + patOptSpace + patOptAnd + patAdolescent + patReqdSpace + patPsychotherapy,
        "JOAP"         :       "\&JOAP\;|J\.?A\.?P\.?|" + patJournal + patReqdSpace + patOptOf + patAnalytical + patReqdSpace + patPsychology,
        #Luzifer-Amor: Zeitschrift zur Geschichte der Psychoanalyse
        #Luzifer-Amor: Zeitschrift zur Geschichte der Psychoanalyse
        "LU-AM"        :       "\&LUAM\;|Luzifer[\-\s]Amor" + "(" + "\s*[\-\:\.]?\s*" + patZeitschrift + patReqdSpace + patZur + patReqdSpace + patGesch + patReqdSpace + patDer + patPsychoanalyse + ")?",
        "MPSA"         :       "\&MPSA\;|" + patModern + patReqdSpace + patPsychoanalysis,
        "NP"           :       "\&J?NP\;|(" + patJournalOf + ")?Neuro(\-?)\s*"  + patPsychoanalysis,
        "OPUS"         :       "\&OPUS\;|" + patOrganizat + patReqdSpace + patOptAnd + patSocial + patReqdSpace + patDynamic,
        "PAH"          :       "\&PAH\;|" + patPsychoanalysis + patReqdSpace + patOptAnd + patHistory,
        "PAQ"          :       "\&PAQ\;|This\s+Quarterly|" + patPsychoanalytic + patReqdSpace + patQuarterly + "(?!(\s*\,?\s+Inc\.|\s+Press))",
        "PB"           :       "\&PB\;|" + patPsychoanalytic + patReqdSpace + patBooks,
        "PCS"          :       "\&PCS\;|" + patPsychoanalysis + patReqdSpace + patOptAnd + patContemporary + patReqdSpace + patScience,

        #  new for 2022
        "PCAS"         :       "\&PCAS\;|" + patJournalForThe + patOptSpace + patPsychoanalysis + patOptSpace + patOptOf + patOptSpace + patCulture + patOptSpace + patOptAnd + patReqdSpace + patSociety,
        "IJFP"         :       "\&IJFP\;|" + patInternational + patReqdSpace + patJournalOf + patReqdSpace + patForensic + patReqdSpace + patPsychotherapy,
        "JPT"          :       "\&JPT\;|" + patJournalOf + patReqdSpace + patPsychological + patReqdSpace + patTherapies,
        "OEDA"         :       "\&OEDA\;|" + patOedipus + patReqdSpace + patAnnual,
        "PPC"          :       "\&PPC\;|" + patPsychoanalysis + patReqdSpace + patOptAnd + patReqdSpace + patPsychotherapy + patReqdSpace + patIn + patReqdSpace + patChina,

        "PCT"          :       "\&PCT\;|" + patPsychoanalysis + patReqdSpace + patOptAnd + patContemporary + patReqdSpace + "(Thought)",
        "PD"           :       "\&PD\;|" + patPsychoanalytic + patReqdSpace + patDialogues,
        "PDPSY"        :       "\&PDPSY\;|" + patPsychodynamic + patReqdSpace + patPsychiatry,
        "PI"           :       "\&PI\;|" + patPsychoanalytic + patReqdSpace + patInquiry,
        "PPERSP"       :       "\&PPERSP\;|" + patPsychoanalytic + patReqdSpace + patPerspectives,
        "PPSY"         :       "\&PPSY\;|" + patPsychoanalytic + patReqdSpace + patPsychology,
        "PPTX"         :       "\&PPTX\;|" + patPsychoanalytic + patReqdSpace + patPsychotherapy,
        "PSAR"         :       "\&PSAR\;|" + patOptThe + "(" + patPsychoanalysis + patOptAndThe + ")?" + patOptSpace + patPsychoanalytic + patReqdSpace + patReview,
        "PSC"          :       "\&PSC\;|" + patOptThe + patPsychoanalytic + patReqdSpace + patStudy + patReqdSpace + patOptOf + patOptThe + "Child",
        "PSP"          :       "\&PSP\;|" + patProgress + patReqdSpace + patOptIn + patSelfPsychology,
        "PSYCHE"       :       "\&PSYCHE\;|Psyche" + "(" + patOptDash + "Z\.?" + patReqdSpace + patPsychoanalyse + ")?",
        "PSU"          :       "\&PSU\;|" + "Psicoterapia" + patReqdSpace + "e" + "Scienze" + patReqdSpace + "Umane",
        "PSW"          :       "\&PSW\;|" + patPsychoanalytic + patReqdSpace + patSocial + patReqdSpace + patWork,
        "PY"           :       "Psikanaliz|Psk."+ patReqdSpace + "Yazıları|Yaz.",
        "RBP"          :       "\&RBP\;|R(ev(ue)?)?(\.\s*|\s+)B(elg(e?))?(\.)?\s+(de\s+)?Psych(\.|an(\.|al\.|alyse))",
        "REVAPA"       :       r"\&REVAPA\;|Riv(\.|ista)\s+(de\s+)?" + patPsicoanalisis,
        "RFP"          :       r"\&RFP\;|" + "(Rev(\\b|\\.|ue)?|R(\\b|\\.?))\\s+?((fran(\\xe7|c)(aise)?(\\.)?|fr(\\.?))\\s+?)" + "(de\\s+)?" + "(Psa\.?|Psyca\.?|Psych(\-?)(an\.?|anal\.?|analyse))",
        "RPP-CS"       :       "\&RPP-CS\;|" + patRevue + patReqdSpace + patPsychoanalytika + patReqdSpace + patPsychoterapie,
        "RRP"          :       "\&RRP\;|RRP|(Rev(\.|ue)?\s+Roum(\.|aine)\s+de\s+Psychanal(\.|yse))|" + patRomanian + patReqdSpace + patJournal + patReqdSpace + patPsychoanalysis,
        "RIP"          :       "\&RIP\;|Riv(ista|\.)\s+It(aliana)\s+(di\s+)?" + patPsicoanalisi,
        "RPSA"         :       r"\&RPSA\;|Riv(\.|ista)\s+(di\s+)?" + patPsicoanalisi,
        "SE"           :       r"(?P<jrnlname>\&SE\;|(S\.E\.)|.*(The)?\s*(Std\.|((Stand(\.|ard)))\s+Ed(\.|ition|it\.))(\s*(of\s+)?(the\s+)?complete\s+psychological\s+works\s+(of\s+)?(Sigmund\s+)?Freud)?,?|((the\s+)?complete\s+psychological\s+works\s+of\s+Sigmund\s+Freud))",
        "SGS"          :       "\&SGS\;|" + patStudy + patReqdSpace + patOptIn + patGender + patReqdSpace + patOptAnd + patSexuality,
        "SPR"          :       "\&SPR\;|" + patScandinavian + patReqdSpace + patPsychoanalytic + patReqdSpace + patReview,
        "TVPA"         :       "\&TVPA\;|" + patTVPATif + patReqdSpace + patTVPAVoor + patReqdSpace + patPsychoanalyse,
        "ZBPA"         :       "\&ZBPA\;|" + patZentrablatt + patReqdSpace + "(" + patFur + patReqdSpace + ")?" + patPsychoanalyse,
        "ZPSAP"        :       "\&ZPSAP\;|" + patZeitschrift + patReqdSpace + "(" + patFur + patReqdSpace + ")?" + patPsychoanalytische + patReqdSpace + patPadagogik,

        # Bad Journal Patterns - Catch and don't link
        "FAP"          :       "\&FA\;|Free\s+?Ass(\.|oc\.|ociations?)\sPress",
        "IPP"          :       "\&IPP\;|Int(\.|ernational)\s+J(\.|ournal)\s+(of\s+)?Psycho(\-?)anal(\.|ysis)\s+?(\&\s+?|and\s+?)?Psycho(\-?)ther(\.|apy)",
        "XPS"          :       "\&XPS\;|Psycho(\.|somatic)\s+Med(\.|icine)\s+(and)?\s+Contemp(\.|orary)\s+" + patPsychoanalysis,

    }

    #print jrnlPEPPatterns.get("ANRP"   )
    #rgxSEPat = re.compile(jrnlPEPPatterns.get("SE"), re.VERBOSE | re.IGNORECASE)
    rgxSEPat = re.compile(jrnlPEPPatterns.get("SE"), re.VERBOSE | re.IGNORECASE)
    SEPat2 = r"\b(SE|S\.\s*E\.)\b" # Keep sep so not so many false positives.  Use only on XML areas
    SEVolPrefix = "("+jrnlPEPPatterns.get("SE")+"|"+SEPat2+")"
    SEVolNumPre = """,?\s*(<v>)?(vol\.?)?\s*"""
    SEVolNumPreVolReq = """,?\s*(<v>)?(vol\.?)\s+"""
    romanNumber = r"""((\s|:)
        I{1,3}V?
        |VI{0,3}
        |IX
        |XI{0,3}V?
        |XVI{0,3}
        |XI?X
        |XXI{0,3}V?
        )\b
        """
    SEVolNum = r"""
        \b(?P<bvol>(4(/|\-|,)5
        |1[0-9]
        |2[0-4]
        |[1-9]
        |%s
        )\b
        )""" % romanNumber

    SEVolColonPage = """:\s*(?P<bpgs>[1-9][0-9]{0,2})"""

    SEPgs = r"""(?P<extra>(\D*?London:?\s+Hogarth\s+Press)?\D*?\s*,?\s*(p{0,2}\.?,?\s*))?:?\s*(?P<bpgs>[1-9][0-9]{0,2}){0,1}\b"""

    rgxSEPat2 = re.compile(SEPat2)

    rgxSEFalsePositives = re.compile("Jelliffe", re.VERBOSE | re.IGNORECASE)

    #rgxSEVol =     re.compile(rgxVolPrefix+rgxVol, re.VERBOSE | re.IGNORECASE)
    rgxSEVol =  re.compile(SEVolPrefix+SEVolNumPre+SEVolNum+SEPgs, re.VERBOSE | re.IGNORECASE)
    rgxSEVol2 = re.compile(SEVolNumPreVolReq+SEVolNum+SEPgs, re.VERBOSE | re.IGNORECASE)
    rgxSEVol3 = re.compile("(<i>)?\s*"+SEVolNum+"\s*(</i>)?", re.VERBOSE | re.IGNORECASE)
    rgxSEVolPageOnly = re.compile(SEVolNum+SEVolColonPage, re.VERBOSE | re.IGNORECASE)

    #rgxSEVol =     re.compile("("+jrnlPEPPatterns.get("SE")+"|"+"SE[\.,])\s*:?\s*(?P<bvol>(4/5|1[0-9]|2[0-4]|[1-9]))(\s*,?\s*(?P<bpgs>[0-9]+)?)", re.VERBOSE)
    rgxJrnlPEPPatterns = []
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("RFP" ), re.VERBOSE | re.IGNORECASE), "RFP"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("LU-AM"   ), re.VERBOSE | re.IGNORECASE), "LU-AM" ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IPP" ), re.VERBOSE | re.IGNORECASE), "IPP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("XPS" ), re.VERBOSE | re.IGNORECASE), "XPS"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("FAP" ), re.VERBOSE | re.IGNORECASE), "FAP"   ))

    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("AIM" ), re.VERBOSE | re.IGNORECASE), "AIM"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("AJP"     ), re.VERBOSE | re.IGNORECASE), "AJP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("AJRPP"), re.VERBOSE | re.IGNORECASE), "AJRPP"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ANIJP-IT"), re.VERBOSE | re.IGNORECASE), "ANIJP-IT"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ANIJP-FR"), re.VERBOSE | re.IGNORECASE), "ANIJP-FR"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ANIJP-EL"), re.VERBOSE | re.IGNORECASE), "ANIJP-EL"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ANIJP-TR"), re.VERBOSE | re.IGNORECASE), "ANIJP-TR"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ANRP"    ), re.VERBOSE | re.IGNORECASE), "ANRP"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("AOP" ), re.VERBOSE | re.IGNORECASE), "AOP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("APM"), re.VERBOSE | re.IGNORECASE), "APM"))
    # BAP needs to be before APA (when patterns are used)
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("BAP" ), re.VERBOSE | re.IGNORECASE), "BAP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("APA" ), re.VERBOSE | re.IGNORECASE), "APA"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("BAFC"), re.VERBOSE | re.IGNORECASE), "BAFC"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("BIP" ), re.VERBOSE | re.IGNORECASE), "BIP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("BJP"), re.VERBOSE | re.IGNORECASE), "BJP"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("CFP"),  re.VERBOSE | re.IGNORECASE), "CFP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("CJP" ), re.VERBOSE | re.IGNORECASE), "CJP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("DR" ), re.VERBOSE | re.IGNORECASE), "DR"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("FA"  ), re.VERBOSE | re.IGNORECASE), "FA"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("FD"  ), re.VERBOSE | re.IGNORECASE), "FD"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("CPS" ), re.VERBOSE | re.IGNORECASE), "CPS"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("GAP" ), re.VERBOSE | re.IGNORECASE), "GAP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("GW"  ), re.VERBOSE | re.IGNORECASE), "GW"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IFP" ), re.VERBOSE | re.IGNORECASE), "IFP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IJAPS"), re.VERBOSE | re.IGNORECASE), "IJAPS"    ))
    # IJAPS should be ahead of APS
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("APS"), re.VERBOSE | re.IGNORECASE), "APS"    ))

    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IJPSP"), re.VERBOSE | re.IGNORECASE), "IJPSP"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IJPSPPSC"), re.VERBOSE | re.IGNORECASE), "IJPSPPSC"    ))
    # IJPSP should be ahead of IJP
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IJP" ), re.VERBOSE | re.IGNORECASE), "IJP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IJPOPEN" ), re.VERBOSE | re.IGNORECASE), "IJPOPEN"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IMAGO" ), re.VERBOSE | re.IGNORECASE), "IMAGO"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IRP" ), re.VERBOSE | re.IGNORECASE), "IRP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JAA" ), re.VERBOSE | re.IGNORECASE), "JAA"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JBP" ), re.VERBOSE | re.IGNORECASE), "JBP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JCP" ), re.VERBOSE | re.IGNORECASE), "JCP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JCPTX"   ), re.VERBOSE | re.IGNORECASE), "JCPTX" ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JICAP"   ), re.VERBOSE | re.IGNORECASE), "JICAP" ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JOAP"), re.VERBOSE | re.IGNORECASE), "JOAP"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("MPSA"    ), re.VERBOSE | re.IGNORECASE), "MPSA"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("NP"  ), re.VERBOSE | re.IGNORECASE), "NP"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("OPUS"), re.VERBOSE | re.IGNORECASE), "OPUS"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PAH" ), re.VERBOSE | re.IGNORECASE), "PAH"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PAQ" ), re.VERBOSE | re.IGNORECASE), "PAQ"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PB" ), re.VERBOSE | re.IGNORECASE), "PB"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PD"  ), re.VERBOSE | re.IGNORECASE), "PD"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PDPSY"), re.VERBOSE | re.IGNORECASE), "PDPSY" ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PI"  ), re.VERBOSE | re.IGNORECASE), "PI"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PPSY"  ), re.VERBOSE | re.IGNORECASE), "PPSY"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PCS" ), re.VERBOSE | re.IGNORECASE), "PCS"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PCAS" ), re.VERBOSE | re.IGNORECASE), "PCAS" ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PCT" ), re.VERBOSE | re.IGNORECASE), "PCT"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PSC" ), re.VERBOSE | re.IGNORECASE), "PSC"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PPERSP" ), re.VERBOSE | re.IGNORECASE), "PPERSP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PSP" ), re.VERBOSE | re.IGNORECASE), "PSP"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PSU" ), re.VERBOSE | re.IGNORECASE), "PSU"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PSW" ), re.VERBOSE | re.IGNORECASE), "PSW"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PY" ), re.VERBOSE | re.IGNORECASE), "PY"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("RBP" ), re.VERBOSE | re.IGNORECASE), "RBP"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("RIP" ), re.VERBOSE | re.IGNORECASE), "RIP"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("RPSA" ), re.VERBOSE | re.IGNORECASE), "RPSA"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("RRP"), re.VERBOSE | re.IGNORECASE), "RRP"))
    rgxJrnlPEPPatterns.append((rgxSEPat,                                                                "SE"    ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("SGS"  ), re.VERBOSE | re.IGNORECASE), "SGS"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("SPR" ), re.VERBOSE | re.IGNORECASE), "SPR"   ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PSAR" ), re.VERBOSE | re.IGNORECASE), "PSAR"  ))  # must be after spr?
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PPTX" ), re.VERBOSE | re.IGNORECASE), "PPTX"  ))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("PSYCHE"), re.VERBOSE), "PSYCHE"))                  # removed ignore case for this. 2014-01-15
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ZBPA"), re.VERBOSE | re.IGNORECASE), "ZBPA"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("ZPSAP"), re.VERBOSE | re.IGNORECASE), "ZPSAP"))
    rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("IZPA"), re.VERBOSE | re.IGNORECASE), "IZPA"))


    #rgxJrnlPEPPatterns.append((re.compile(jrnlPEPPatterns.get("JEP" ), re.VERBOSE | re.IGNORECASE), "JEP"   ))


    #--------------------------------------------------------------------------------
    def validate(self, jrnlCode, jrnlYear, jrnlVol, articleID="", report=1, context=None):
        """
        Validate journal volume information against the tables of journal volume/years.
        Only valid for PEP journals.

        Returns True if valid, False if not.
        """

        if None in (jrnlCode, jrnlYear, jrnlVol):
            ret_val = False # what happens if it's a book?  Inconsistent with TBD marked below...
        else:
            if isinstance(jrnlYear, str):  # supports string and unicode
                jrnlYear = opasgenlib.atoiYear(jrnlYear)

            if not opasDocuments.isVolumeNumber(jrnlVol):
                jrnlVol = opasDocuments.VolumeNumber(jrnlVol)

            if self.all.get(jrnlCode)==None:
                # this is from a book or not a pep journal
                ret_val = True  # TBD - Check if this is right...
            elif not self.matchVol(jrnlCode, jrnlYear, jrnlVol):
                if not self.matchVol(jrnlCode, jrnlYear, jrnlVol.volID(noSuffix=True)):
                    vol, volList = self.getVol(jrnlCode, jrnlYear)
                    ret_val = False
                    errStr = "%s jrnlVol %s did not match lookup vol %s for %s" % (jrnlCode, jrnlVol, vol, jrnlYear)

                    acxt = ""
                    if context!=None:
                        acxt = context

                        if not opasgenlib.is_empty(articleID):
                            acxt = "%s/%s" % (articleID, acxt)

                        if not opasgenlib.is_empty(acxt): acxt = "(%s) " % acxt

                    errInsert = "%s%s" % (acxt, errStr)

                    if report == 1:
                        logger.error(f"({errInsert}) Severe - Metadata")

                    else:
                        pass
                else:
                    ret_val = True
            else:
                ret_val = True

        return ret_val

    #--------------------------------------------------------------------------------
    def matchVol(self, jrnlCode, jrnlYear, jrnlVol):
        """
        Returns True or False, depending on whether the volume and year
            are correct for the jnrlcode.
        """

        ret_val = False
        # sometimes a string might be passed in as jrnlVol, because of supplements, so
        #  convert this parameter to volumnumber if so
        if isinstance(jrnlVol, str):  # supports string and unicode
            jrnlVol = opasDocuments.VolumeNumber(jrnlVol)
            #print "Converted jrnlvol: ", jrnlVol

        if jrnlCode != None:
            vol, volList = self.getVol(jrnlCode, jrnlYear)
            if type(volList) == type([]):
                # then this journal has a list of volumes for that year.
                isAList = True
                volToCompare = volList
            else:
                volToCompare = vol
                isAList = False

            if isAList:
                if type(jrnlVol) == type([]):
                    # they are both lists:
                    ret_val = True
                    for n in jrnlVol:
                        # compare contents, ignoring order
                        if n not in volList:
                            ret_val = False
                            # not the same
                            break
                else:
                    if jrnlVol in volList:
                        ret_val = True
            else:
                if type(jrnlVol) == type([]):
                    raise "Error: looking for list of journal volumes, when this journals year shows only one volume number."
                elif jrnlVol == vol:
                    ret_val = True

        #print "jrnlvol: '%s', vol: '%s', type: %s, equal: %s" % (jrnlVol, vol, type(jrnlVol), jrnlVol==vol)
        return ret_val


    #--------------------------------------------------------------------------------
    def getYear(self, jrnlCode, jrnlVol):
        """
        Returns the year for a given volume of a journal.
        The data is from the global tables in this module.
        """
        ret_val = None
        baseYear = 0

        if not opasDocuments.isVolumeNumber(jrnlVol):
            jrnlVol = opasDocuments.VolumeNumber(jrnlVol)

        try:
            currDict = self.all[jrnlCode.upper()]
        except:
            #print "%s is a book; no year populated in locator." % jrnlCode
            pass
        else:
            if currDict != None:
                for (year, vol) in currDict.items():
                    #print "%s/%s/%s/" % (vol, year, jrnlVol)
                    if type(vol) == type([]):
                        # hmm. will this work with jrnlVol being an object?
                        if jrnlVol in vol:
                            ret_val = year
                            break
                    else:
                        if vol == jrnlVol:
                            ret_val = year
                            break
            else:
                logger.warn("Can't find year/date dict for %s" % jrnlCode)

        return ret_val


    #--------------------------------------------------------------------------------
    #def getSEVol(self, refText, PYXTree=None, noTrace=False):
        #"""
        #See if this is SE, and if so, return the volume and page number, otherwise return
        #None.

        #refText should be TEXT with XML markup.

        #If PYXTree is not none, it should be a SciHLPyxie tree and it should already be positioned
            #at the reference in question.

        #>>> jrnlData = PEPJournalData()
        #>>> testData = 'FREUD, S. 1898a Sexuality in the Aetiology of the Neuroses, S.E. 3, 261'
        #>>> jrnlData.getSEVol(testData)
        #(3, 'P0261')
        #>>> testData = 'FREUD, S. 1898a Sexuality in the Aetiology of the Neuroses, SE 3, 261'
        #>>> jrnlData.getSEVol(testData)

        #>>> testData = 'Freud, S. 1925 Negation Standard Edition XIX     p. 235-243'
        #>>> jrnlData.getSEVol(testData)
        #(19, 'P0235')
        #>>> testData = '''<be lang="en" rx="SE.011.0177A" id="B014" class="na">Freud, S. (1912). On the universal tendency to debasement in the sphere of love. <i>S.E.</i> <i>11</i>.</be>'''
        #>>> jrnlData.getSEVol(testData)
        #(11, None)
        #>>> testData = '''<be id = "B019"><a><l>Freud</l>, S.</a> (<y>1905</y>). <t>Three Essays on the Theory of Sexuality</t>. <bst>S.E.</bst> <v>7</v>.</be>'''
        #>>> jrnlData.getSEVol(testData)
        #(5, None)

        #"""
        ##print "MatchSE checking: ", refText

        #pvol = None
        #ppp = None
        #psrc = None
        #ret_val = None
        #vol = None
        #pg = None
        #found = True

        #matchSE = self.matchSEtoReference(refText, PYXTree)
        #if matchSE == None:
            ## return none, don't go on!
            ##print "Not SE", refText, PYXTree
            #return ret_val
        #else:
            #SEName, restRef = matchSE
            ##print "Rest of Reference: ", restRef
            ##print "Input Text: ", refText
            ##print "Input Tree: ", type(PYXTree), PYXTree

        ## Ok, we have SE.  What is the volume, page!

        #if PYXTree != None and (PYXTree.getElements(SUB, E("v"))!=[]):
            #elem = PYXTree.CurPos.tag
            ## get vol, but must be direct child of current element.
            #vol = PYXTree.getElementTextSingleton(SUB, E('v'), parentSpec=E(elem))
            ##print "VOL0: ", vol
            #vol = processVol(vol)
            #pg = PYXTree.getElementTextSingleton(SUB, E('pp'), parentSpec=E(elem))
            #pg, vol = processPage(pg, vol)
            #ret_val = (vol, pg)  # set this anyway, saying it IS SE but no vol or page found
            ##if gDbg2: print "Found SE, Vol, Page! (xml): ", vol, pg

        #else: # This is unmarked SE.  Find volume data
            ## look for volume and page
            #if gDbg1 and noTrace==False:
                #print("\t",80*"^")
                ##print "Searching for SE: ", refText

            #m = self.rgxSEVolPageOnly.search(refText)
            #if m != None:
                #if gDbg1: print("rgxSEVolPageOnly!", m.group("bvol"), m.group("bpgs"))
                #vol = m.group("bvol")
                ##print "VOL1: ", vol
                ##vol = re.split("[,/-]|\&amp;", vol)[0]
                #vol = processVol(vol)
                #pg = m.group("bpgs")
                #pg, vol = processPage(pg, vol)
            #else:
                ##print "Searching for vol using: ", self.rgxSEVol.pattern
                #m = self.rgxSEVol.search(refText)
                #if m != None:
                    #if gDbg1: print("rgxSEVolMatch!", m.group("extra"), m.group("bvol"), m.group("bpgs"))
                    #vol = m.group("bvol")
                    ##print "VOL2: ", vol
                    ##vol = re.split("[,/-]|\&amp;", vol)[0]
                    #vol = processVol(vol)
                    #pg = m.group("bpgs")
                    #pg, vol = processPage(pg, vol)
                #else:
                    #if restRef == None:
                        #restRef = refText
                    ##print "Searching restRef: ", restRef
                    #m = self.rgxSEVol3.search(restRef)
                    #if gDbg1: print("Warning - Searching for Vol # alone in italics out of desperation.")
                    #if m != None:
                        #if gDbg1: print("rgxSEVolMatch3!", m.groups())
                        #vol = m.group("bvol")
                        #vol = processVol(vol)
                    #else:
                        #m = self.rgxSEVol2.search(restRef)
                        #if gDbg1: print("Warning - Searching Vol # alone out of desperation.")
                        #if m != None:
                            #if gDbg1: print("rgxSEVolMatch2!", m.groups())
                            #vol = m.group("bvol")
                            #vol = processVol(vol)
                            #pg = m.group("bpgs")
                            #pg, vol = processPage(pg, vol)
                        #else: # try vol, ANYWHERE (not just after the journal
                            #m = self.rgxSEVol2.search(refText)
                            #if gDbg1: print("Warning - Searching Vol only, in all of Ref (4).")
                            #if m != None:
                                #if gDbg1: print("rgxSEVolMatch4!", m.groups())
                                #vol = m.group("bvol")
                                #vol = processVol(vol)
                                #pg = m.group("bpgs")
                                #pg, vol = processPage(pg, vol)
                            #else:
                                #vol = 1     # default volume (for refs where it's just the whole std edition cited
            #if int(opasgenlib.convRomanToArabic(vol)) > 0:
                #ret_val = (vol, pg)  # set this anyway, saying it IS SE but no vol or page found
            #else:
                #ret_val = None

        #if gDbg1: print("Found SE, Vol, Page!: ", vol, pg)

        #return ret_val

    #--------------------------------------------------------------------------------
    def getVol(self, jrnlCode, jrnlYear):
        """
        Return the volume number (string) for the given jrnlCode and jrnlYear.
        Always returns a string, or None if the lookup was not successful
        The second return value is the list of values, or a singular list with the indiv.
        value
        """
        ret_val = None
        ret_valList = []
        baseYear = 0

        if jrnlCode == None:
            logger.warn("getVol: No journal name for %s/%s" % (jrnlCode, jrnlYear))
            return ret_val, ret_valList

        #if gDbg1: print "Args: ", jrnlCode, jrnlYear
        if jrnlYear != None:
            if isinstance(jrnlYear, str):  # supports string and unicode
                jrnlYear = opasgenlib.atoiNotEmpty(jrnlYear)
                #if gDbg1: print "Journal Year: ", jrnlYear

            if isinstance(jrnlYear, opasDocuments.PubYear):
                jrnlYear = opasgenlib.atoiNotEmpty(repr(jrnlYear))

            # handle SE separately NOTE: This is not a good way to find the SE Year/Vol!
            if jrnlCode in ["SE"]:
                pass
                #if 0: # NEED TO FIX
                    #from .libPEPBiblioDB import BiblioDB
                    #biblioDB = BiblioDB()
                    #ret_valList = biblioDB.getPEPVols("SE", jrnlYear)
                    #if gDbg1: print("SE Volumes Retrieved for Year: ", ret_valList)
                    #if not opasgenlib.is_empty(ret_valList):
                        #ret_val = ret_valList[0]
            else:
                currDict = self.all.get(jrnlCode.upper(), None)

                if currDict != None:
                    currVol = currDict.get(jrnlYear) # needs to be numeric!
                    #print "CurrVol, type: ", currVol, type(currVol)
                    if currVol != None:
                        # Need to do something different if its a list.
                        if type(currVol) == type([]):
                            logger.info("getVol: this year has multiple volume numbers: %s." % currVol)
                            ret_val = opasDocuments.VolumeNumber(currVol[0])  # first element returned in ret_val, converted to volume number
                            ret_valList = currVol
                        else:
                            #print "getVol Else: ", currVol
                            ret_val = opasDocuments.VolumeNumber(currVol)
                            ret_valList = [ret_val]

        if opasgenlib.is_empty(ret_val):
            # don't bother reporting if jrnlYear is 0; just not interesting!
            if jrnlYear!=0 and jrnlYear!="0":
                logger.warn("getVol: Cannot find vol for %s/%s" % (jrnlCode, jrnlYear))

        #print "CurrVol, type: ", ret_val, type(ret_val)
        return ret_val, ret_valList

     #--------------------------------------------------------------------------------
    def getPEPJournalCode(self, strText, exactText = False):
        """
        Given a full journal name, as it might be "cited", returns a tuple with
            (
                PEPCode,
                PEPAbbr,
                Journal Name as Cited
            )

        NOTE: refEntry must be a ReferenceMetadata instance

        If PEP Journal, returns:
            (PEPCode, PEPAbbr, FullJournalName)
        If this is not a PEP journal, returns:
            (None, None, None)

        Test Cases:
            >>> jrnlData = PEPJournalData()
            >>> jrnlData.getPEPJournalCode(u'Psychoanalytic Books')[0]
            'PB'
            >>> jrnlData.getPEPJournalCode(u'Psa. Books')[0]
            'PB'
            >>> jrnlData.getPEPJournalCode(u'Revue francaise de psychanalyse')[0]
            'RFP'
            >>> jrnlData.getPEPJournalCode(u'Rev. fr. psa.')[0]
            'RFP'
            >>> jrnlData.getPEPJournalCode('Revue fran\xe7aise de psychanalysee')[0]
            'RFP'
            >>> jrnlData.getPEPJournalCode('Ztschr. f. Psa. P\xe4d.')[0]
            'ZPSAP'
            >>> jrnlData.getPEPJournalCode('Ztschr. f. Psa. P\xc3\xa4d.')[0]
            'ZPSAP'
            >>> jrnlData.getPEPJournalCode("Zschr. psychoanal. Pädagogik.")[0]
            'ZPSAP'
            >>> jrnlData.getPEPJournalCode("Z. Psychoanal. Pädagogik")[0]
            'ZPSAP'
            >>> jrnlData.getPEPJournalCode("Zs. für psa. Pädagogik")[0]
            'ZPSAP'
            >>> jrnlData.getPEPJournalCode("Ztschr. Psa. Päd.")[0]
            'ZPSAP'
            >>> jrnlData.getPEPJournalCode("Int. Zeitschr. f. PsA.")[0]
            'IZPA'
            >>> jrnlData.getPEPJournalCode("Internat. J. Psa.")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Intern. J. Psa.")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Zentralblatt Psychoanal.")[0]
            'ZBPA'
            >>> jrnlData.getPEPJournalCode("Zbl. Psyca.")[0]
            'ZBPA'
            >>> jrnlData.getPEPJournalCode("Zentralblatt Psychoanal.")[0]
            'ZBPA'
            >>> jrnlData.getPEPJournalCode("I.J. Psycho-Anal")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("I.J. Psycho-Anal.")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("I.J.P.")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("I.J.P.A.")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("IJP")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Can J Psychoanal")[0]
            'CJP'
            >>> jrnlData.getPEPJournalCode("Stud Gend Sex")[0]
            'SGS'
            >>> jrnlData.getPEPJournalCode("Stud. Gend. Sex.")[0]
            'SGS'
            >>> jrnlData.getPEPJournalCode("Psa. Study of the Child")[0]
            'PSC'
            >>> jrnlData.getPEPJournalCode("International Journal of Psychoanalysis")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("This Quarterly")[0]
            'PAQ'
            >>> jrnlData.getPEPJournalCode("International. Journal of Psycho-Analysis")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Int. J. of Psa")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Int. J. Psa")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Journal of the American Psychoanalytic Association")[0]
            'APA'
            >>> jrnlData.getPEPJournalCode("American Imago")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Am Imago")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Am Imago.")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Amer Imago")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Amer. Imago")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Amer. Im.")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Amer. Im")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("American Journal of Psychoanalysis")[0]
            'AJP'
            >>> jrnlData.getPEPJournalCode("Amer J Psychoanal")[0]
            'AJP'
            >>> jrnlData.getPEPJournalCode("Am J Psychoanal")[0]
            'AJP'
            >>> jrnlData.getPEPJournalCode("Am Jour Psychoanal.")[0]
            'AJP'
            >>> jrnlData.getPEPJournalCode("Annual  of  Psychoanal")[0]
            'AOP'
            >>> jrnlData.getPEPJournalCode("Annual  of  Psa")[0]
            'AOP'
            >>> jrnlData.getPEPJournalCode("Ann Psychoanal")[0]
            'AOP'
            >>> jrnlData.getPEPJournalCode("J of the Am Psychoanalytic Association")[0]
            'APA'
            >>> jrnlData.getPEPJournalCode("J Am Psychoanalytic Association")[0]
            'APA'
            >>> jrnlData.getPEPJournalCode("Bull. of the Amer Psychoanalytic Association")[0]
            'BAP'
            >>> jrnlData.getPEPJournalCode("Bull. of Intl. Psycho-analytic Assn.")[0]
            'BIP'
            >>> jrnlData.getPEPJournalCode("Bull. of the intl. Psycho-analytic Assn.")[0]
            'BIP'
            >>> jrnlData.getPEPJournalCode("Bull. of Intl. Psycho-analytic Assn.")[0]
            'BIP'
            >>> jrnlData.getPEPJournalCode("Free Associations")[0]
            'FA'
            >>> jrnlData.getPEPJournalCode("Free Assns")[0]
            'FA'
            >>> jrnlData.getPEPJournalCode("Int. J of Psychoanalytic Self Psychology")[0]
            'IJPSP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("AIM"))[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("AJP"))[0]
            'AJP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("AOP"))[0]
            'AOP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("ANRP"))[0]
            'ANRP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("APA"))[0]
            'APA'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("BAFC"))[0]
            'BAFC'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("BAP"))[0]
            'BAP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("BIP"))[0]
            'BIP'
            >>> jrnlData.getPEPJournalCode("Bul. Int. Psychoanal. Assn.")[0]
            'BIP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("CJP"))[0]
            'CJP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("CPS"))[0]
            'CPS'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("FA"))[0]
            'FA'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("FD"))[0]
            'FD'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("GAP"))[0]
            'GAP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("IFP"))[0]
            'IFP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("IJP"))[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("IJPSP"))[0]
            'IJPSP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("IRP"))[0]
            'IRP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("JAA"))[0]
            'JAA'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("JICAP"))[0]
            'JICAP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("JCP"))[0]
            'JCP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("JOAP"))[0]
            'JOAP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("IJPSP"))[0]
            'IJPSP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("JCPTX"))[0]
            'JCPTX'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("MPSA"))[0]
            'MPSA'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PAH"))[0]
            'PAH'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PAQ"))[0]
            'PAQ'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PCT"))[0]
            'PCT'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PCS"))[0]
            'PCS'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PI"))[0]
            'PI'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PD"))[0]
            'PD'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PSAR"))[0]
            'PSAR'
            >>> jrnlData.getPEPJournalCode("Psychoanalytic Review")[0]
            'PSAR'
            >>> jrnlData.getPEPJournalCode("The Psychoanalytic Review")[0]
            'PSAR'
            >>> jrnlData.getPEPJournalCode("The Psa Review")[0]
            'PSAR'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PSC"))[0]
            'PSC'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PSP"))[0]
            'PSP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PPTX"))[0]
            'PPTX'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("PPSY"))[0]
            'PPSY'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("RBP"))[0]
            'RBP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("RIP"))[0]
            'RIP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("RPSA"))[0]
            'RPSA'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("NP"))[0]
            'NP'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("SGS"))[0]
            'SGS'
            >>> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("SPR"))[0]
            'SPR'
            >>> jrnlData.getPEPJournalCode("Journal of the American Academy of Psychoanalysis")[0]
            'JAA'
            >>> jrnlData.getPEPJournalCode("J Am Psychoanal Assoc")[0]
            'APA'
            >>> jrnlData.getPEPJournalCode("Psychoanal Rev")[0]
            'PSAR'
            >>> jrnlData.getPEPJournalCode("Int J Psychoanal")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("J Anal Psychol")[0]
            'JOAP'
            >>> jrnlData.getPEPJournalCode("Psychoanal Q")[0]
            'PAQ'
            >>> jrnlData.getPEPJournalCode("J Am Acad Psychoanal Dyn Psychiatry")[0]
            'JAA'
            >>> jrnlData.getPEPJournalCode("Am J Psychoanal ")[0]
            'AJP'

            >> jrnlData.getPEPJournalCode(jrnlData.getJournalFull("JEP"))[0]
            'JEP'
            >> jrnlData.getJournalFull("JEP")
            >> jrnlData.jrnlPEPPatterns["JEP"]



            >>> jrnlData.getPEPJournalCode("Amer. Imago")[0]
            'AIM'
            >>> jrnlData.getPEPJournalCode("Ital. Psychoanal. Annu.")[0]
            'ANRP'
            >>> jrnlData.getPEPJournalCode("Am. J. Psychoanal.")[0]
            'AJP'
            >>> jrnlData.getPEPJournalCode("Annu. Psychoanal.")[0]
            'AOP'
            >>> jrnlData.getPEPJournalCode("J. Amer. Psychoanal. Assn.")[0]
            'APA'
            >>> jrnlData.getPEPJournalCode("Bul. Anna Freud Centre")[0]
            'BAFC'
            >>> jrnlData.getPEPJournalCode("Bul. Amer. Psychoanal. Assn.")[0]
            'BAP'
            >>> jrnlData.getPEPJournalCode("Bul. Int. Psychoanal. Assn.")[0]
            'BIP'
            >>> jrnlData.getPEPJournalCode("Can. J. Psychoanal.")[0]
            'CJP'
            >>> jrnlData.getPEPJournalCode("Contemp. Psychoanal.")[0]
            'CPS'
            >>> jrnlData.getPEPJournalCode("Free Associations")[0]
            'FA'
            >>> jrnlData.getPEPJournalCode("Fort  Da")[0]
            'FD'
            >>> jrnlData.getPEPJournalCode("Gender and Psychoanal.")[0]
            'GAP'
            >>> jrnlData.getPEPJournalCode("Int. Forum Psychoanal.")[0]
            'IFP'
            >>> jrnlData.getPEPJournalCode("Int. J. Psycho-Anal.")[0]
            'IJP'
            >>> jrnlData.getPEPJournalCode("Int. J. Psychoanal. Self Psychol.")[0]
            'IJPSP'
            >>> jrnlData.getPEPJournalCode("Int. Rev. Psycho-Anal.")[0]
            'IRP'
            >>> jrnlData.getPEPJournalCode("J. Am. Acad. Psychoanal. Dyn. Psychiatr.")[0]
            'JAA'
            >>> jrnlData.getPEPJournalCode("J. Clin. Psychoanal.")[0]
            'JCP'
            >>> jrnlData.getPEPJournalCode("J. Child Psychother.")[0]
            'JCPTX'
            >>> jrnlData.getPEPJournalCode("Neuro-Psychoanalysis")[0]
            'NP'
            >>> jrnlData.getPEPJournalCode("J. Infant Child Adolesc. Psychother.")[0]
            'JICAP'
            >>> jrnlData.getPEPJournalCode("J. Anal. Psychol.")[0]
            'JOAP'
            >>> jrnlData.getPEPJournalCode("Mod. Psychoanal.")[0]
            'MPSA'
            >>> jrnlData.getPEPJournalCode("Neuro-Psychoanalysis")[0]
            'NP'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Hist.")[0]
            'PAH'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Q.")[0]
            'PAQ'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Contemp. Sci.")[0]
            'PCS'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Contemp. Thought")[0]
            'PCT'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Dial.")[0]
            'PD'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Inq.")[0]
            'PI'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Psychol.")[0]
            'PPSY'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Psychother.")[0]
            'PPTX'
            >>> jrnlData.getPEPJournalCode("Psychoanal. Rev.")[0]
            'PSAR'
            >>> jrnlData.getPEPJournalCode("Psychoanal. St. Child")[0]
            'PSC'
            >>> jrnlData.getPEPJournalCode("Progr. Self Psychol.")[0]
            'PSP'
            >>> jrnlData.getPEPJournalCode("Rev. Belg. Psychanal.")[0]
            'RBP'
            >>> jrnlData.getPEPJournalCode("Psychoanalytic Social Work")[0]
            'PSW'
            >>> jrnlData.getPEPJournalCode("Scand. Psychoanal. Rev.")[0]
            'SPR'

        """
        # use this to lookup journal codes from a journal name

        ret_val = (None, None, None)
        found = False

        if strText != "":
            try:
                if not isinstance(strText, str):
                    strText = strText.encode("utf8")   # 2018-01-19 Make sure it's UTF8 (if error, then it is already, so pass)
            except Exception as e:
                logger.warning("Encoding error: %s" % e)

            for (rgxJournalPtrn, code) in self.rgxJrnlPEPPatterns:
                #print "Pattern: ", rgxJournalPtrn.pattern, code
                if exactText:
                    m = rgxJournalPtrn.match(strText)
                else:
                    m = rgxJournalPtrn.search(strText)

                if m != None:
                    jrnlName = m.group()
                    found = True
                    ret_val = (code, self.jrnlAbbr.get(code, None), jrnlName)
                    if gDbg1:
                        if exactText:
                            print("getPEPJournalCode found exactmatch (code, abbr, full name):", ret_val)
                        else:
                            print("getPEPJournalCode found (code, abbr, full name):", ret_val)
                    break

        if gDbg1:
            if not found:
                print("PEP Journal Not found for: ", strText)
        return ret_val

    #--------------------------------------------------------------------------------
    #def matchSEtoReference(self, strRef, refPYX=None):
        #"""
        #Returns either None if not SE, or the SE journal found

        #NOTE: This currently will not match the unpunctuated abbr SE in "text" (it will in the <j> tag.

        #"""
        #jrnl = None
        #rest = None
        #exactText = False
        #elem = ""
        #if refPYX!=None:
            #found = True
            #elem = refPYX.CurPos.tag
            #jrnl = refPYX.getElementTextSingleton(SUB, E('j|bst'), parentSpec=E(elem))
            ##print "jrnl/src: ", jrnl
            ## try getting the text, minus any sub-bincs
            #fullRef = refPYX.getCurrElementText(notIncludingTagRegex=("binc"))
        #elif strRef != None:
            #fullRef = strRef
        #else:
            #raise "No data supplied in reference."

        ## now, if not already resolved...
        #if not opasgenlib.is_empty(jrnl):
            ##print "J/BST present: ", jrnl
            #m = self.rgxSEPat.match(jrnl)
            #if m == None:
                ##print "trying pattern 2 on jrnl"
                #m = self.rgxSEPat2.match(jrnl)

            #if m != None:
                ## journal matched, it's SE
                #rest = refEntry.getElementTextSingleton(SUB, E('v'), parentSpec=E(elem))
                #ret_val = (jrnl, rest)
            #else:
                ## Not SE
                #ret_val = None
        #else:
            ## not resolved, do by search
            #if gDbg1: print("Checking SE FullRef: ", fullRef)
            #m = self.rgxSEPat.search(fullRef)

            #if m!=None:
                #jrnl = m.group("jrnlname")
                #try:
                    #rest = fullRef[m.end("jrnlname"):]
                #except:
                    #rest = ""
                    #if gDbg1: print("Nothing else after name", strRef)
            #else:
                #jrnl = None

            #if jrnl != None:
                #ret_val = (jrnl, rest)
                ##print "SE Journal found"
            #else:
                #ret_val = None

        #return ret_val

    ##--------------------------------------------------------------------------------
    #def years(self, jrnlCode):
        #"""
        #Returns a list of all years for a journal code

            #>>> jrnlData = PEPJournalData()
            #>>> jrnlData.years("pptx")
            #[1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]
        #"""
        #ret_val = []
        #jrnlCode = jrnlCode.upper()
        #try:
            #for year, vol in list(self.all[jrnlCode].items()):
                #ret_val.append(year)
        #except:
            #print("Journal Code not found: ", jrnlCode)

        #return ret_val

    ##--------------------------------------------------------------------------------
    #def journalCodes(self):
        #"""
        #Returns a list of all journalcodes
        #Note: Test results need updating whenever new journal codes are included.

            #>>> jrnlData = PEPJournalData()
            #>>> jrnlData.journalCodes()
            #['PAQ', 'ANIJP-IT', 'FA', 'FD', 'PAH', 'PPSY', 'CPS', 'MPSA', 'SPR', 'RIP', 'ANIJP-DE', 'AOP', 'NP', 'BAFC', 'GW', 'JEP', 'ANRP', 'JCPTX', 'JAA', 'RPSA', 'IJPSP', 'SE', 'PPTX', 'IFP', 'BAP', 'PCS', 'PCAS', JOAP', 'PCT', 'AIM', 'JCP', 'ANIJP-FR', 'SGS', 'JICAP', 'GAP', 'IRP', 'PD', 'PDPSY', 'PI', 'BIP', 'IJAPS', 'AJP', 'RBP', 'CJP', 'PPERSP', 'IJP', 'APA', 'PSC', 'PSAR', 'PSP', 'PSW']
        #"""
        #ret_val = list(self.all.keys())
        #ret_val.sort()
        #return ret_val

    #--------------------------------------------------------------------------------
    def vols(self, jrnlCode):
        """
        Returns a list of all volumes for a journal code

            >>> jrnlData = PEPJournalData()
            >>> jrnlData.vols("pptx")[0:27]
            [1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

        """
        ret_val = []
        jrnlCode = jrnlCode.upper()
        try:
            for year, vol in list(self.all[jrnlCode].items()):
                ret_val.append(vol)
        except:
            print("Journal Code not found: ", jrnlCode)

        return ret_val

    #--------------------------------------------------------------------------------
    def volyears(self, jrnlCode):
        """
        Returns a list of tuples with vol, year  for a journal code

            >>> jrnlData = PEPJournalData()
            >>> jrnlData.volyears("PPTX")
            [(1, 1985), (2, 1986), (3, 1987), (3, 1988), (4, 1989), (5, 1990), (5, 1991), (6, 1992), (7, 1993), (8, 1994), (9, 1995), (10, 1996), (11, 1997), (12, 1998), (13, 1999), (14, 2000), (15, 2001), (16, 2002), (17, 2003), (18, 2004), (19, 2005), (20, 2006), (21, 2007), (22, 2008), (23, 2009), (24, 2010), (25, 2011), (26, 2012), (27, 2013), (28, 2014), (29, 2015), (30, 2016), (31, 2017), (32, 2018), (33, 2019)]

        """
        ret_val = []
        jrnlCode = jrnlCode.upper()
        try:
            for year, vol in list(self.all[jrnlCode].items()):
                ret_val.append((vol, year))
        except:
            print("Journal Code not found: ", jrnlCode)

        return ret_val

#--------------------------------------------------------------------------------
def processPage(page, pvol=None):
    """
        setup and format the page info in a page object.

        >>> processPage("21")
        ('P0021', None)
        >>> processPage("300-321")
        ('P0300', None)
    """
    if not opasgenlib.is_empty(page):
        page = opasDocuments.PageRange(page).pgStart
        if pvol==15:
            if page>241:
                if gDbg1: print("Adjusting Page, PVol: ", page, pvol)
                pvol=16
        elif pvol==4:
            if page>=628:
                if gDbg1: print("Adjusting Page, PVol: ", page, pvol)
                pvol=5
        elif pvol==5:
            if page<628 and page > 0:
                if gDbg1: print("Adjusting Page, PVol: ", page, pvol)
                pvol=4
        page = page.format(keyword=page.LOCALID)
        #print "XML PageStart (vol: %s): %s " % (pvol, page)
    return page, pvol

#--------------------------------------------------------------------------------
def processVol(vol):
    """
    Check for exceptions for vol (4/5, 16/16), and convert final vol into Integer.
    """
    # Roman vols can be converted to Arabic, no need to keep info on that.
    #if vol in ["4/5", "4-5", "4,5", "IV/V", "IV-V", "IV - V", "IV, V", "4 &amp; 5", "4&amp;5", "4 &ndash; 5", "4&ndash;5"]: vol=4
    #if vol in ["15/16", "15-16", "15,16", "XV-XVI", "XV, XVI", "XV - XVI", "XV&amp;XVI", "XV &amp; XVI", "15&amp;16", "15 &amp; 16", "15 &ndash; 16", "15&ndash;16"]: vol=15
    #print "ProcessVol Vol for Cleanup: ", vol
    ret_val = opasDocuments.VolumeNumber(vol)
    if 0:
        # moved to volNum in opasDocuments
        if isinstance(vol, str):  # supports string and unicode
            vol = re.split("[,/\-\s&]", vol)
            vol = vol[0]
            vol = opasgenlib.trimPunctAndSpaces(vol) # OLD:, punct_set=",. :;(\t\"'-")
        if opasgenlib.isRoman(vol):
            vol = opasgenlib.convRomanToArabic(vol)  # Returns number whether arabic or roman
        if vol==5: vol=4
        if vol==16: vol=15
        if isinstance(vol, str):  # supports string and unicode
            try:
                vol = int(vol)
            except:
                print("Defaulted to vol 1 because of error with vol=", vol)
                vol = 1  # So far, it seems these are mostly SE without volumes, so go to vol 1!
    return ret_val


#==================================================================================================
# Main Standalone (Test) Routines
#==================================================================================================
if __name__ == "__main__":

    import sys
    import doctest

    doctest.testmod()
    sys.exit()






