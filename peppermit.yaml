openapi: 3.0.0
info:
    description: >-
        A simple API used to check a session_id and document_id against the
        login/permissions server (PaDS) to verify if that session is logged in and
        represents a user with access to that document.
        Rhymes with Peppermint! :)

            - Two ways to ask for the permit: 
                1. get
                    - simple query parameter version     
                2. post 
                    - Allows the parameters to be specified in the request body and
                        include more information

            - Data Flow
                - ClientApp connects to PaDS right away as a matter of protocol (not part of this API)
                - PaDS sets a session_id in the response to ClientApp (and sends whatever else the two need to work together)
                - ClientApp sends search and request API calls to the PEPServer including session_id.  
                    - PEPServer returns abstracts or other data to the ClientApp and logs these actions to a data table (or file)
                - When ClientApp requests a Full-Text Read (FT-Read) operation for doc_id for the server:
                    -	PEPServer sends pep/permit request to PaDS with the client's session_id, the requested doc_id and doc_year (and optionally doc information in requestbody).
                        - PaDS looks up the session_id to verify if the user is logged in and the user's rights, and responds to the PEPServer with an authorization or denial, including a reason
                        - PEPServer now responds to the ClientApp's document request with either a FT-Doc, or the Abstract (for denial), with the reason
                        - If denied, ClientApp can then give the user the reason and offer to log in (which would go back to PaDS).
                - Notes:
                    - Permits are only used once, and only used for FT-Doc access
                    - Timestamps are included to help synchronize logging
                    - The Server doesn't keep the session_ids for anything; they are used just for logging, and requesting permits.
                    - The Server doesn't keep, know or care anything about the user, aside from the session_id and any permits.
                    - The session_ids are only important to the current session for the ClientApp and PaDS.
                        -	PaDS will need to keep them to log actions for counter reports, using data betweeen it and 
                            - PaDS will be able to download logs from the server with session activity if needed.  Probably will need to for any search related reporting.  Another option is direct access to a PEP logging database.
                            - We will need to work out retention periods for logs or data entries.             

    version: "1.0.0-oas3"
    title: PEPPermit API
    contact:
        email: neil@scilab-inc.com
    license:
        name: Apache 2.0
        url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
    - name: PaDS
        description: Operations available to the PEP Server from PaDS
paths:

    /pep/permits/:
        post:
            tags:
                - developers
            summary: Post a request for full-text read permission for a document
            requestBody:
                description: >
                    The document server asks the pep permits system for access permission
                    for a specific session (identified by session_id) for a specific
                    document (identified by document_id) and also provides additional
                    identifying information including document_year

                    The advantage of the post is that the Server sending the request adds 
                    a documentRef allowing PaDS to log more information about the doc_id
                    (though it could be alternatively provided to PaDS through the RESTFul 
           API of the server.)
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PermitRequest'
            responses:
                '201':
                    description: permision granted
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: '#/components/schemas/PermitResponse'
                '403':
                    description: permision denied

        get:
            tags:
                - developers
            summary: Get full-text read permission for a document
            operationId: getPermit
            description: >
                The document server asks the pep permits system for access permission
                for a specific session (identified by session_id) for a specific
                document (identified by document_id) and also provides additional
                identifying information including document_year
            parameters:
                - in: query
                    name: session_id
                    description: ID of a particular users session
                    example: Vc_IXp7w_2CVCg3u707A8Q
                    required: true
                    schema:
                        type: string
                - in: query
                    name: doc_id
                    description: >-
                        Standard PEP document_id (sometimes referred to as article_id) which
                        usually consists of a publication code, volume number, and starting
                        page, e.g., "IJP.082.0215A"
                    example: IJP.082.0215A
                    required: true
                    schema:
                        type: string
                - in: query
                    name: doc_year
                    description: >-
                        The year of the document to help identify it beyond the document_id
                        (which has the publication volume only)
                    example: 2019
                    schema:
                        type: string
            responses:
                '200':
                    description: The return permit
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: '#/components/schemas/PermitResponse'
                '403':
                    description: permission denied
servers:
    - url: 'https://virtserver.swaggerhub.com/nrshapiro/PEPPermit/1.0.0'
components:
    schemas:
        PermitRequest:
            type: object
            required:
                - session_id
                - doc_id
                - doc_year
                - timestamp
            properties:
                session_id:
                    type: string
                    format: uuid
                    example: Vc_IXp7w_2CVCg3u707A8Q
                doc_id:
                    type: string
                    example: IJP.100.1068A
                doc_year:
                    type: integer
                    example: 2019
                doc_ref:
                    type: string
                    example: >-
                        Tuckett, D. (2019). Ideas prevented from becoming conscious: On
                        Freud&#8217;s unconscious and the theory of psychoanalytic
                        technique. Int. J. Psycho-Anal., 100(6):1068-1083.
                timestamp:
                    type: integer
                    description: Request time expressed in Unix Epoch time
                    example: 1586314940
        PermitResponse:
            type: object
            required:
                - session_id
                - doc_id
                - permit
            properties:
                session_id:
                    type: string
                    format: uuid
                    example: Vc_IXp7w_2CVCg3u707A8Q
                doc_id:
                    type: string
                    example: IJP.082.0215A
                permit:
                    type: boolean
                    example: true
                reason_id:
                    type: integer
                    example: 201
                reason_str:
                    type: string
                    example: IJP.082.0215A